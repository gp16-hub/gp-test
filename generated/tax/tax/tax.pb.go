// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.5
// source: tax/tax.proto

package tax

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaxRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	From             *Address               `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // Order warehouse address, only used in US, not required for other markets
	To               *Address               `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // required, order ship_address
	LineItems        []*LineItemsRequest    `protobuf:"bytes,3,rep,name=lineItems,proto3" json:"lineItems,omitempty"`
	Shipping         float64                `protobuf:"fixed64,4,opt,name=shipping,proto3" json:"shipping,omitempty"`               // US is used and taxjar is required; SG and AU do not use this parameter for the time being, put shipments (including shipping) in items for calculation
	WithCache        bool                   `protobuf:"varint,5,opt,name=withCache,proto3" json:"withCache,omitempty"`              // false if not passed, cache calculation is used, only used in US
	TaxJarInternalID string                 `protobuf:"bytes,6,opt,name=TaxJarInternalID,proto3" json:"TaxJarInternalID,omitempty"` // optional, TaxJar internal ID, used to identify the tax exemption result, only used in US
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaxRequest) Reset() {
	*x = TaxRequest{}
	mi := &file_tax_tax_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxRequest) ProtoMessage() {}

func (x *TaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_tax_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxRequest.ProtoReflect.Descriptor instead.
func (*TaxRequest) Descriptor() ([]byte, []int) {
	return file_tax_tax_proto_rawDescGZIP(), []int{0}
}

func (x *TaxRequest) GetFrom() *Address {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TaxRequest) GetTo() *Address {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TaxRequest) GetLineItems() []*LineItemsRequest {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *TaxRequest) GetShipping() float64 {
	if x != nil {
		return x.Shipping
	}
	return 0
}

func (x *TaxRequest) GetWithCache() bool {
	if x != nil {
		return x.WithCache
	}
	return false
}

func (x *TaxRequest) GetTaxJarInternalID() string {
	if x != nil {
		return x.TaxJarInternalID
	}
	return ""
}

type TaxResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TotalAmount    float64                `protobuf:"fixed64,1,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`       // Order total
	TaxableAmount  float64                `protobuf:"fixed64,2,opt,name=taxableAmount,proto3" json:"taxableAmount,omitempty"`   // Taxable amount
	TaxCollectable float64                `protobuf:"fixed64,3,opt,name=taxCollectable,proto3" json:"taxCollectable,omitempty"` // Tax receivable
	TaxRate        float64                `protobuf:"fixed64,4,opt,name=taxRate,proto3" json:"taxRate,omitempty"`               // Tax rate
	Shipping       *ShippingResponse      `protobuf:"bytes,5,opt,name=shipping,proto3" json:"shipping,omitempty"`
	LineItems      []*LineItemsResponse   `protobuf:"bytes,6,rep,name=lineItems,proto3" json:"lineItems,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaxResponse) Reset() {
	*x = TaxResponse{}
	mi := &file_tax_tax_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxResponse) ProtoMessage() {}

func (x *TaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_tax_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxResponse.ProtoReflect.Descriptor instead.
func (*TaxResponse) Descriptor() ([]byte, []int) {
	return file_tax_tax_proto_rawDescGZIP(), []int{1}
}

func (x *TaxResponse) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TaxResponse) GetTaxableAmount() float64 {
	if x != nil {
		return x.TaxableAmount
	}
	return 0
}

func (x *TaxResponse) GetTaxCollectable() float64 {
	if x != nil {
		return x.TaxCollectable
	}
	return 0
}

func (x *TaxResponse) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *TaxResponse) GetShipping() *ShippingResponse {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *TaxResponse) GetLineItems() []*LineItemsResponse {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryCode   string                 `protobuf:"bytes,1,opt,name=countryCode,proto3" json:"countryCode,omitempty"` // required, will affect tax calculation
	State         string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`             // required, will affect tax calculation, CA required, SG/AU optional
	City          string                 `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Street        string                 `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`
	Zip           string                 `protobuf:"bytes,5,opt,name=zip,proto3" json:"zip,omitempty"` // US required, will affect tax calculation; SG/AU optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_tax_tax_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_tax_tax_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_tax_tax_proto_rawDescGZIP(), []int{2}
}

func (x *Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

type LineItemsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Quantity           int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ProductTaxCategory string                 `protobuf:"bytes,3,opt,name=productTaxCategory,proto3" json:"productTaxCategory,omitempty"` // tax Category name, used to find the corresponding tax code. If not passed, the default value is an empty string.
	UnitPrice          float64                `protobuf:"fixed64,4,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`
	Discount           float64                `protobuf:"fixed64,5,opt,name=discount,proto3" json:"discount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LineItemsRequest) Reset() {
	*x = LineItemsRequest{}
	mi := &file_tax_tax_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineItemsRequest) ProtoMessage() {}

func (x *LineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_tax_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineItemsRequest.ProtoReflect.Descriptor instead.
func (*LineItemsRequest) Descriptor() ([]byte, []int) {
	return file_tax_tax_proto_rawDescGZIP(), []int{3}
}

func (x *LineItemsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LineItemsRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *LineItemsRequest) GetProductTaxCategory() string {
	if x != nil {
		return x.ProductTaxCategory
	}
	return ""
}

func (x *LineItemsRequest) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *LineItemsRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type LineItemsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Item id, which may be item type + primary key id, derived from crusader
	TaxableAmount   float64                `protobuf:"fixed64,2,opt,name=taxableAmount,proto3" json:"taxableAmount,omitempty"`
	TaxCollectable  float64                `protobuf:"fixed64,3,opt,name=taxCollectable,proto3" json:"taxCollectable,omitempty"`
	TaxRate         float64                `protobuf:"fixed64,4,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	IncludedInPrice bool                   `protobuf:"varint,5,opt,name=includedInPrice,proto3" json:"includedInPrice,omitempty"` // Whether tax is included in the price, derived from tax rate
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LineItemsResponse) Reset() {
	*x = LineItemsResponse{}
	mi := &file_tax_tax_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineItemsResponse) ProtoMessage() {}

func (x *LineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_tax_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineItemsResponse.ProtoReflect.Descriptor instead.
func (*LineItemsResponse) Descriptor() ([]byte, []int) {
	return file_tax_tax_proto_rawDescGZIP(), []int{4}
}

func (x *LineItemsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LineItemsResponse) GetTaxableAmount() float64 {
	if x != nil {
		return x.TaxableAmount
	}
	return 0
}

func (x *LineItemsResponse) GetTaxCollectable() float64 {
	if x != nil {
		return x.TaxCollectable
	}
	return 0
}

func (x *LineItemsResponse) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *LineItemsResponse) GetIncludedInPrice() bool {
	if x != nil {
		return x.IncludedInPrice
	}
	return false
}

type ShippingResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaxableAmount  float64                `protobuf:"fixed64,1,opt,name=taxableAmount,proto3" json:"taxableAmount,omitempty"`
	TaxCollectable float64                `protobuf:"fixed64,2,opt,name=taxCollectable,proto3" json:"taxCollectable,omitempty"`
	TaxRate        float64                `protobuf:"fixed64,3,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShippingResponse) Reset() {
	*x = ShippingResponse{}
	mi := &file_tax_tax_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShippingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingResponse) ProtoMessage() {}

func (x *ShippingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_tax_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingResponse.ProtoReflect.Descriptor instead.
func (*ShippingResponse) Descriptor() ([]byte, []int) {
	return file_tax_tax_proto_rawDescGZIP(), []int{5}
}

func (x *ShippingResponse) GetTaxableAmount() float64 {
	if x != nil {
		return x.TaxableAmount
	}
	return 0
}

func (x *ShippingResponse) GetTaxCollectable() float64 {
	if x != nil {
		return x.TaxCollectable
	}
	return 0
}

func (x *ShippingResponse) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

var File_tax_tax_proto protoreflect.FileDescriptor

var file_tax_tax_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x74, 0x61, 0x78, 0x2f, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x74, 0x61, 0x78, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x61, 0x78, 0x4a, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x61,
	0x78, 0x4a, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x80,
	0x02, 0x0a, 0x0b, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x61, 0x78, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x7f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a,
	0x69, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x61,
	0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb5, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x10, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x78,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x32, 0x3a, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54,
	0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x2f, 0x74, 0x61, 0x78, 0x3b, 0x74, 0x61, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_tax_tax_proto_rawDescOnce sync.Once
	file_tax_tax_proto_rawDescData []byte
)

func file_tax_tax_proto_rawDescGZIP() []byte {
	file_tax_tax_proto_rawDescOnce.Do(func() {
		file_tax_tax_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tax_tax_proto_rawDesc), len(file_tax_tax_proto_rawDesc)))
	})
	return file_tax_tax_proto_rawDescData
}

var file_tax_tax_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tax_tax_proto_goTypes = []any{
	(*TaxRequest)(nil),        // 0: tax.TaxRequest
	(*TaxResponse)(nil),       // 1: tax.TaxResponse
	(*Address)(nil),           // 2: tax.Address
	(*LineItemsRequest)(nil),  // 3: tax.LineItemsRequest
	(*LineItemsResponse)(nil), // 4: tax.LineItemsResponse
	(*ShippingResponse)(nil),  // 5: tax.ShippingResponse
}
var file_tax_tax_proto_depIdxs = []int32{
	2, // 0: tax.TaxRequest.from:type_name -> tax.Address
	2, // 1: tax.TaxRequest.to:type_name -> tax.Address
	3, // 2: tax.TaxRequest.lineItems:type_name -> tax.LineItemsRequest
	5, // 3: tax.TaxResponse.shipping:type_name -> tax.ShippingResponse
	4, // 4: tax.TaxResponse.lineItems:type_name -> tax.LineItemsResponse
	0, // 5: tax.Tax.CalculateTax:input_type -> tax.TaxRequest
	1, // 6: tax.Tax.CalculateTax:output_type -> tax.TaxResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_tax_tax_proto_init() }
func file_tax_tax_proto_init() {
	if File_tax_tax_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tax_tax_proto_rawDesc), len(file_tax_tax_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tax_tax_proto_goTypes,
		DependencyIndexes: file_tax_tax_proto_depIdxs,
		MessageInfos:      file_tax_tax_proto_msgTypes,
	}.Build()
	File_tax_tax_proto = out.File
	file_tax_tax_proto_goTypes = nil
	file_tax_tax_proto_depIdxs = nil
}
