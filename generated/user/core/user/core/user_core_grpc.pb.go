// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: user/core/user_core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_GetUser_FullMethodName                         = "/user.core.UserService/GetUser"
	UserService_UpdateUser_FullMethodName                      = "/user.core.UserService/UpdateUser"
	UserService_GetUserAddresses_FullMethodName                = "/user.core.UserService/GetUserAddresses"
	UserService_UpdateUserAddress_FullMethodName               = "/user.core.UserService/UpdateUserAddress"
	UserService_CreateUserAddress_FullMethodName               = "/user.core.UserService/CreateUserAddress"
	UserService_DeleteUserAddress_FullMethodName               = "/user.core.UserService/DeleteUserAddress"
	UserService_GetAddressById_FullMethodName                  = "/user.core.UserService/GetAddressById"
	UserService_GetWishItemVariants_FullMethodName             = "/user.core.UserService/GetWishItemVariants"
	UserService_DeleteWishItemVariant_FullMethodName           = "/user.core.UserService/DeleteWishItemVariant"
	UserService_BatchAddWishItemVariant_FullMethodName         = "/user.core.UserService/BatchAddWishItemVariant"
	UserService_GetWishLooksInfoByUser_FullMethodName          = "/user.core.UserService/GetWishLooksInfoByUser"
	UserService_DeleteWishLook_FullMethodName                  = "/user.core.UserService/DeleteWishLook"
	UserService_BatchAddWishLook_FullMethodName                = "/user.core.UserService/BatchAddWishLook"
	UserService_GetTermsOfUseLogsByUser_FullMethodName         = "/user.core.UserService/GetTermsOfUseLogsByUser"
	UserService_GetLatestTermsOfUseLogByUser_FullMethodName    = "/user.core.UserService/GetLatestTermsOfUseLogByUser"
	UserService_FindOrCreateTermsOfUseLogByUser_FullMethodName = "/user.core.UserService/FindOrCreateTermsOfUseLogByUser"
	UserService_GetUserByToken_FullMethodName                  = "/user.core.UserService/GetUserByToken"
	UserService_CreateUser_FullMethodName                      = "/user.core.UserService/CreateUser"
	UserService_UserAuthToken_FullMethodName                   = "/user.core.UserService/UserAuthToken"
	UserService_AuthOrCreateUser_FullMethodName                = "/user.core.UserService/AuthOrCreateUser"
	UserService_GetUserByQuery_FullMethodName                  = "/user.core.UserService/GetUserByQuery"
	UserService_SetResetPasswordToken_FullMethodName           = "/user.core.UserService/SetResetPasswordToken"
	UserService_UpdateUserPasswdByToken_FullMethodName         = "/user.core.UserService/UpdateUserPasswdByToken"
	UserService_UserOauthRefreshToken_FullMethodName           = "/user.core.UserService/UserOauthRefreshToken"
	UserService_GetUserSubscription_FullMethodName             = "/user.core.UserService/GetUserSubscription"
	UserService_UpdateUserSubscription_FullMethodName          = "/user.core.UserService/UpdateUserSubscription"
	UserService_CreateUserSubscription_FullMethodName          = "/user.core.UserService/CreateUserSubscription"
	UserService_FindOrCreateUserSubscription_FullMethodName    = "/user.core.UserService/FindOrCreateUserSubscription"
	UserService_GetBirthdayUsersOfCurrentMonth_FullMethodName  = "/user.core.UserService/GetBirthdayUsersOfCurrentMonth"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Gets a user by ID
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Update a user by ID
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Gets a user address by ID
	GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error)
	// Update a user address
	UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error)
	// Create a user address by ID
	CreateUserAddress(ctx context.Context, in *CreateUserAddressRequest, opts ...grpc.CallOption) (*CreateUserAddressResponse, error)
	// Delete a user address by ID
	DeleteUserAddress(ctx context.Context, in *DeleteUserAddressRequest, opts ...grpc.CallOption) (*DeleteUserAddressResponse, error)
	// Gets address by address ID
	GetAddressById(ctx context.Context, in *GetAddressByIdRequest, opts ...grpc.CallOption) (*GetAddressByIdResponse, error)
	// 获取收藏清单中的所有产品
	GetWishItemVariants(ctx context.Context, in *GetWishItemVariantsRequest, opts ...grpc.CallOption) (*GetWishItemVariantsResponse, error)
	// 删除收藏清单中的某个产品
	DeleteWishItemVariant(ctx context.Context, in *DeleteWishItemVariantRequest, opts ...grpc.CallOption) (*DeleteWishItemVariantResponse, error)
	// 批量添加收藏清单中的产品
	BatchAddWishItemVariant(ctx context.Context, in *BatchAddWishItemVariantRequest, opts ...grpc.CallOption) (*BatchAddWishItemVariantResponse, error)
	// 获取用户收藏的look信息
	GetWishLooksInfoByUser(ctx context.Context, in *GetWishLooksInfoByUserRequest, opts ...grpc.CallOption) (*GetWishLooksInfoByUserResponse, error)
	// 删除收藏look
	DeleteWishLook(ctx context.Context, in *DeleteWishLookRequest, opts ...grpc.CallOption) (*DeleteWishLookResponse, error)
	// 批量添加收藏look
	BatchAddWishLook(ctx context.Context, in *BatchAddWishLookRequest, opts ...grpc.CallOption) (*BatchAddWishLookResponse, error)
	// 获取用户接受的使用协议的日志
	GetTermsOfUseLogsByUser(ctx context.Context, in *GetTermsOfUseLogsByUserRequest, opts ...grpc.CallOption) (*GetTermsOfUseLogsByUserResponse, error)
	// 获取用户最新接受的使用协议日志
	GetLatestTermsOfUseLogByUser(ctx context.Context, in *GetLatestTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*GetLatestTermsOfUseLogByUserResponse, error)
	// 更新用户接受的使用协议的日志
	FindOrCreateTermsOfUseLogByUser(ctx context.Context, in *FindOrCreateTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*FindOrCreateTermsOfUseLogByUserResponse, error)
	GetUserByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserByTokenResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UserAuthToken(ctx context.Context, in *UserAuthTokenRequest, opts ...grpc.CallOption) (*UserAuthTokenResponse, error)
	AuthOrCreateUser(ctx context.Context, in *AuthOrCreateUserRequest, opts ...grpc.CallOption) (*AuthOrCreateUserResponse, error)
	GetUserByQuery(ctx context.Context, in *GetUserByQueryRequest, opts ...grpc.CallOption) (*GetUserByQueryResponse, error)
	SetResetPasswordToken(ctx context.Context, in *SetResetPasswordTokenRequest, opts ...grpc.CallOption) (*SetResetPasswordTokenResponse, error)
	UpdateUserPasswdByToken(ctx context.Context, in *UpdateUserPasswdByTokenRequest, opts ...grpc.CallOption) (*UpdateUserPasswdByTokenResponse, error)
	UserOauthRefreshToken(ctx context.Context, in *UserOauthRefreshTokenRequest, opts ...grpc.CallOption) (*UserOauthRefreshTokenResponse, error)
	GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error)
	UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error)
	CreateUserSubscription(ctx context.Context, in *CreateUserSubscriptionRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionResponse, error)
	FindOrCreateUserSubscription(ctx context.Context, in *FindOrCreateUserSubscriptionRequest, opts ...grpc.CallOption) (*FindOrCreateUserSubscriptionResponse, error)
	// Get birthday users of current month
	GetBirthdayUsersOfCurrentMonth(ctx context.Context, in *GetBirthdayUsersOfCurrentMonthRequest, opts ...grpc.CallOption) (*GetBirthdayUsersOfCurrentMonthResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAddressesResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserAddressResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserAddress(ctx context.Context, in *CreateUserAddressRequest, opts ...grpc.CallOption) (*CreateUserAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserAddressResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserAddress(ctx context.Context, in *DeleteUserAddressRequest, opts ...grpc.CallOption) (*DeleteUserAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserAddressResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAddressById(ctx context.Context, in *GetAddressByIdRequest, opts ...grpc.CallOption) (*GetAddressByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressByIdResponse)
	err := c.cc.Invoke(ctx, UserService_GetAddressById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWishItemVariants(ctx context.Context, in *GetWishItemVariantsRequest, opts ...grpc.CallOption) (*GetWishItemVariantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWishItemVariantsResponse)
	err := c.cc.Invoke(ctx, UserService_GetWishItemVariants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteWishItemVariant(ctx context.Context, in *DeleteWishItemVariantRequest, opts ...grpc.CallOption) (*DeleteWishItemVariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWishItemVariantResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteWishItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchAddWishItemVariant(ctx context.Context, in *BatchAddWishItemVariantRequest, opts ...grpc.CallOption) (*BatchAddWishItemVariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAddWishItemVariantResponse)
	err := c.cc.Invoke(ctx, UserService_BatchAddWishItemVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWishLooksInfoByUser(ctx context.Context, in *GetWishLooksInfoByUserRequest, opts ...grpc.CallOption) (*GetWishLooksInfoByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWishLooksInfoByUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetWishLooksInfoByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteWishLook(ctx context.Context, in *DeleteWishLookRequest, opts ...grpc.CallOption) (*DeleteWishLookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWishLookResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteWishLook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchAddWishLook(ctx context.Context, in *BatchAddWishLookRequest, opts ...grpc.CallOption) (*BatchAddWishLookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAddWishLookResponse)
	err := c.cc.Invoke(ctx, UserService_BatchAddWishLook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTermsOfUseLogsByUser(ctx context.Context, in *GetTermsOfUseLogsByUserRequest, opts ...grpc.CallOption) (*GetTermsOfUseLogsByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTermsOfUseLogsByUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetTermsOfUseLogsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLatestTermsOfUseLogByUser(ctx context.Context, in *GetLatestTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*GetLatestTermsOfUseLogByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestTermsOfUseLogByUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetLatestTermsOfUseLogByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindOrCreateTermsOfUseLogByUser(ctx context.Context, in *FindOrCreateTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*FindOrCreateTermsOfUseLogByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOrCreateTermsOfUseLogByUserResponse)
	err := c.cc.Invoke(ctx, UserService_FindOrCreateTermsOfUseLogByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByTokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAuthToken(ctx context.Context, in *UserAuthTokenRequest, opts ...grpc.CallOption) (*UserAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAuthTokenResponse)
	err := c.cc.Invoke(ctx, UserService_UserAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AuthOrCreateUser(ctx context.Context, in *AuthOrCreateUserRequest, opts ...grpc.CallOption) (*AuthOrCreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthOrCreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_AuthOrCreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByQuery(ctx context.Context, in *GetUserByQueryRequest, opts ...grpc.CallOption) (*GetUserByQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByQueryResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetResetPasswordToken(ctx context.Context, in *SetResetPasswordTokenRequest, opts ...grpc.CallOption) (*SetResetPasswordTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResetPasswordTokenResponse)
	err := c.cc.Invoke(ctx, UserService_SetResetPasswordToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserPasswdByToken(ctx context.Context, in *UpdateUserPasswdByTokenRequest, opts ...grpc.CallOption) (*UpdateUserPasswdByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPasswdByTokenResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserPasswdByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserOauthRefreshToken(ctx context.Context, in *UserOauthRefreshTokenRequest, opts ...grpc.CallOption) (*UserOauthRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOauthRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserService_UserOauthRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserSubscription(ctx context.Context, in *CreateUserSubscriptionRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindOrCreateUserSubscription(ctx context.Context, in *FindOrCreateUserSubscriptionRequest, opts ...grpc.CallOption) (*FindOrCreateUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOrCreateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, UserService_FindOrCreateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBirthdayUsersOfCurrentMonth(ctx context.Context, in *GetBirthdayUsersOfCurrentMonthRequest, opts ...grpc.CallOption) (*GetBirthdayUsersOfCurrentMonthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBirthdayUsersOfCurrentMonthResponse)
	err := c.cc.Invoke(ctx, UserService_GetBirthdayUsersOfCurrentMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// Gets a user by ID
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Update a user by ID
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Gets a user address by ID
	GetUserAddresses(context.Context, *GetUserAddressesRequest) (*GetUserAddressesResponse, error)
	// Update a user address
	UpdateUserAddress(context.Context, *UpdateUserAddressRequest) (*UpdateUserAddressResponse, error)
	// Create a user address by ID
	CreateUserAddress(context.Context, *CreateUserAddressRequest) (*CreateUserAddressResponse, error)
	// Delete a user address by ID
	DeleteUserAddress(context.Context, *DeleteUserAddressRequest) (*DeleteUserAddressResponse, error)
	// Gets address by address ID
	GetAddressById(context.Context, *GetAddressByIdRequest) (*GetAddressByIdResponse, error)
	// 获取收藏清单中的所有产品
	GetWishItemVariants(context.Context, *GetWishItemVariantsRequest) (*GetWishItemVariantsResponse, error)
	// 删除收藏清单中的某个产品
	DeleteWishItemVariant(context.Context, *DeleteWishItemVariantRequest) (*DeleteWishItemVariantResponse, error)
	// 批量添加收藏清单中的产品
	BatchAddWishItemVariant(context.Context, *BatchAddWishItemVariantRequest) (*BatchAddWishItemVariantResponse, error)
	// 获取用户收藏的look信息
	GetWishLooksInfoByUser(context.Context, *GetWishLooksInfoByUserRequest) (*GetWishLooksInfoByUserResponse, error)
	// 删除收藏look
	DeleteWishLook(context.Context, *DeleteWishLookRequest) (*DeleteWishLookResponse, error)
	// 批量添加收藏look
	BatchAddWishLook(context.Context, *BatchAddWishLookRequest) (*BatchAddWishLookResponse, error)
	// 获取用户接受的使用协议的日志
	GetTermsOfUseLogsByUser(context.Context, *GetTermsOfUseLogsByUserRequest) (*GetTermsOfUseLogsByUserResponse, error)
	// 获取用户最新接受的使用协议日志
	GetLatestTermsOfUseLogByUser(context.Context, *GetLatestTermsOfUseLogByUserRequest) (*GetLatestTermsOfUseLogByUserResponse, error)
	// 更新用户接受的使用协议的日志
	FindOrCreateTermsOfUseLogByUser(context.Context, *FindOrCreateTermsOfUseLogByUserRequest) (*FindOrCreateTermsOfUseLogByUserResponse, error)
	GetUserByToken(context.Context, *GetUserByTokenRequest) (*GetUserByTokenResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UserAuthToken(context.Context, *UserAuthTokenRequest) (*UserAuthTokenResponse, error)
	AuthOrCreateUser(context.Context, *AuthOrCreateUserRequest) (*AuthOrCreateUserResponse, error)
	GetUserByQuery(context.Context, *GetUserByQueryRequest) (*GetUserByQueryResponse, error)
	SetResetPasswordToken(context.Context, *SetResetPasswordTokenRequest) (*SetResetPasswordTokenResponse, error)
	UpdateUserPasswdByToken(context.Context, *UpdateUserPasswdByTokenRequest) (*UpdateUserPasswdByTokenResponse, error)
	UserOauthRefreshToken(context.Context, *UserOauthRefreshTokenRequest) (*UserOauthRefreshTokenResponse, error)
	GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error)
	UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error)
	CreateUserSubscription(context.Context, *CreateUserSubscriptionRequest) (*CreateUserSubscriptionResponse, error)
	FindOrCreateUserSubscription(context.Context, *FindOrCreateUserSubscriptionRequest) (*FindOrCreateUserSubscriptionResponse, error)
	// Get birthday users of current month
	GetBirthdayUsersOfCurrentMonth(context.Context, *GetBirthdayUsersOfCurrentMonthRequest) (*GetBirthdayUsersOfCurrentMonthResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserAddresses(context.Context, *GetUserAddressesRequest) (*GetUserAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddresses not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserAddress(context.Context, *UpdateUserAddressRequest) (*UpdateUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAddress not implemented")
}
func (UnimplementedUserServiceServer) CreateUserAddress(context.Context, *CreateUserAddressRequest) (*CreateUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAddress not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserAddress(context.Context, *DeleteUserAddressRequest) (*DeleteUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAddress not implemented")
}
func (UnimplementedUserServiceServer) GetAddressById(context.Context, *GetAddressByIdRequest) (*GetAddressByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressById not implemented")
}
func (UnimplementedUserServiceServer) GetWishItemVariants(context.Context, *GetWishItemVariantsRequest) (*GetWishItemVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishItemVariants not implemented")
}
func (UnimplementedUserServiceServer) DeleteWishItemVariant(context.Context, *DeleteWishItemVariantRequest) (*DeleteWishItemVariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishItemVariant not implemented")
}
func (UnimplementedUserServiceServer) BatchAddWishItemVariant(context.Context, *BatchAddWishItemVariantRequest) (*BatchAddWishItemVariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddWishItemVariant not implemented")
}
func (UnimplementedUserServiceServer) GetWishLooksInfoByUser(context.Context, *GetWishLooksInfoByUserRequest) (*GetWishLooksInfoByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishLooksInfoByUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteWishLook(context.Context, *DeleteWishLookRequest) (*DeleteWishLookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishLook not implemented")
}
func (UnimplementedUserServiceServer) BatchAddWishLook(context.Context, *BatchAddWishLookRequest) (*BatchAddWishLookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddWishLook not implemented")
}
func (UnimplementedUserServiceServer) GetTermsOfUseLogsByUser(context.Context, *GetTermsOfUseLogsByUserRequest) (*GetTermsOfUseLogsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermsOfUseLogsByUser not implemented")
}
func (UnimplementedUserServiceServer) GetLatestTermsOfUseLogByUser(context.Context, *GetLatestTermsOfUseLogByUserRequest) (*GetLatestTermsOfUseLogByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTermsOfUseLogByUser not implemented")
}
func (UnimplementedUserServiceServer) FindOrCreateTermsOfUseLogByUser(context.Context, *FindOrCreateTermsOfUseLogByUserRequest) (*FindOrCreateTermsOfUseLogByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrCreateTermsOfUseLogByUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByToken(context.Context, *GetUserByTokenRequest) (*GetUserByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UserAuthToken(context.Context, *UserAuthTokenRequest) (*UserAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthToken not implemented")
}
func (UnimplementedUserServiceServer) AuthOrCreateUser(context.Context, *AuthOrCreateUserRequest) (*AuthOrCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthOrCreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByQuery(context.Context, *GetUserByQueryRequest) (*GetUserByQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByQuery not implemented")
}
func (UnimplementedUserServiceServer) SetResetPasswordToken(context.Context, *SetResetPasswordTokenRequest) (*SetResetPasswordTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResetPasswordToken not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserPasswdByToken(context.Context, *UpdateUserPasswdByTokenRequest) (*UpdateUserPasswdByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPasswdByToken not implemented")
}
func (UnimplementedUserServiceServer) UserOauthRefreshToken(context.Context, *UserOauthRefreshTokenRequest) (*UserOauthRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOauthRefreshToken not implemented")
}
func (UnimplementedUserServiceServer) GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscription not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscription not implemented")
}
func (UnimplementedUserServiceServer) CreateUserSubscription(context.Context, *CreateUserSubscriptionRequest) (*CreateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSubscription not implemented")
}
func (UnimplementedUserServiceServer) FindOrCreateUserSubscription(context.Context, *FindOrCreateUserSubscriptionRequest) (*FindOrCreateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrCreateUserSubscription not implemented")
}
func (UnimplementedUserServiceServer) GetBirthdayUsersOfCurrentMonth(context.Context, *GetBirthdayUsersOfCurrentMonthRequest) (*GetBirthdayUsersOfCurrentMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirthdayUsersOfCurrentMonth not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAddresses(ctx, req.(*GetUserAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserAddress(ctx, req.(*UpdateUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserAddress(ctx, req.(*CreateUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserAddress(ctx, req.(*DeleteUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAddressById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAddressById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAddressById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAddressById(ctx, req.(*GetAddressByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWishItemVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishItemVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWishItemVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWishItemVariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWishItemVariants(ctx, req.(*GetWishItemVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteWishItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishItemVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteWishItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteWishItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteWishItemVariant(ctx, req.(*DeleteWishItemVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchAddWishItemVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddWishItemVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchAddWishItemVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchAddWishItemVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchAddWishItemVariant(ctx, req.(*BatchAddWishItemVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWishLooksInfoByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishLooksInfoByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWishLooksInfoByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWishLooksInfoByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWishLooksInfoByUser(ctx, req.(*GetWishLooksInfoByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteWishLook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishLookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteWishLook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteWishLook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteWishLook(ctx, req.(*DeleteWishLookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchAddWishLook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddWishLookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchAddWishLook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchAddWishLook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchAddWishLook(ctx, req.(*BatchAddWishLookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTermsOfUseLogsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTermsOfUseLogsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTermsOfUseLogsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTermsOfUseLogsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTermsOfUseLogsByUser(ctx, req.(*GetTermsOfUseLogsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLatestTermsOfUseLogByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTermsOfUseLogByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLatestTermsOfUseLogByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetLatestTermsOfUseLogByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLatestTermsOfUseLogByUser(ctx, req.(*GetLatestTermsOfUseLogByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindOrCreateTermsOfUseLogByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrCreateTermsOfUseLogByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOrCreateTermsOfUseLogByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindOrCreateTermsOfUseLogByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOrCreateTermsOfUseLogByUser(ctx, req.(*FindOrCreateTermsOfUseLogByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByToken(ctx, req.(*GetUserByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAuthToken(ctx, req.(*UserAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AuthOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthOrCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AuthOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AuthOrCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AuthOrCreateUser(ctx, req.(*AuthOrCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByQuery(ctx, req.(*GetUserByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetResetPasswordToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetResetPasswordToken(ctx, req.(*SetResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserPasswdByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswdByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserPasswdByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserPasswdByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserPasswdByToken(ctx, req.(*UpdateUserPasswdByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserOauthRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOauthRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserOauthRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserOauthRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserOauthRefreshToken(ctx, req.(*UserOauthRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserSubscription(ctx, req.(*GetUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserSubscription(ctx, req.(*UpdateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserSubscription(ctx, req.(*CreateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindOrCreateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrCreateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOrCreateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindOrCreateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOrCreateUserSubscription(ctx, req.(*FindOrCreateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBirthdayUsersOfCurrentMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirthdayUsersOfCurrentMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBirthdayUsersOfCurrentMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetBirthdayUsersOfCurrentMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBirthdayUsersOfCurrentMonth(ctx, req.(*GetBirthdayUsersOfCurrentMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.core.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserAddresses",
			Handler:    _UserService_GetUserAddresses_Handler,
		},
		{
			MethodName: "UpdateUserAddress",
			Handler:    _UserService_UpdateUserAddress_Handler,
		},
		{
			MethodName: "CreateUserAddress",
			Handler:    _UserService_CreateUserAddress_Handler,
		},
		{
			MethodName: "DeleteUserAddress",
			Handler:    _UserService_DeleteUserAddress_Handler,
		},
		{
			MethodName: "GetAddressById",
			Handler:    _UserService_GetAddressById_Handler,
		},
		{
			MethodName: "GetWishItemVariants",
			Handler:    _UserService_GetWishItemVariants_Handler,
		},
		{
			MethodName: "DeleteWishItemVariant",
			Handler:    _UserService_DeleteWishItemVariant_Handler,
		},
		{
			MethodName: "BatchAddWishItemVariant",
			Handler:    _UserService_BatchAddWishItemVariant_Handler,
		},
		{
			MethodName: "GetWishLooksInfoByUser",
			Handler:    _UserService_GetWishLooksInfoByUser_Handler,
		},
		{
			MethodName: "DeleteWishLook",
			Handler:    _UserService_DeleteWishLook_Handler,
		},
		{
			MethodName: "BatchAddWishLook",
			Handler:    _UserService_BatchAddWishLook_Handler,
		},
		{
			MethodName: "GetTermsOfUseLogsByUser",
			Handler:    _UserService_GetTermsOfUseLogsByUser_Handler,
		},
		{
			MethodName: "GetLatestTermsOfUseLogByUser",
			Handler:    _UserService_GetLatestTermsOfUseLogByUser_Handler,
		},
		{
			MethodName: "FindOrCreateTermsOfUseLogByUser",
			Handler:    _UserService_FindOrCreateTermsOfUseLogByUser_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _UserService_GetUserByToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UserAuthToken",
			Handler:    _UserService_UserAuthToken_Handler,
		},
		{
			MethodName: "AuthOrCreateUser",
			Handler:    _UserService_AuthOrCreateUser_Handler,
		},
		{
			MethodName: "GetUserByQuery",
			Handler:    _UserService_GetUserByQuery_Handler,
		},
		{
			MethodName: "SetResetPasswordToken",
			Handler:    _UserService_SetResetPasswordToken_Handler,
		},
		{
			MethodName: "UpdateUserPasswdByToken",
			Handler:    _UserService_UpdateUserPasswdByToken_Handler,
		},
		{
			MethodName: "UserOauthRefreshToken",
			Handler:    _UserService_UserOauthRefreshToken_Handler,
		},
		{
			MethodName: "GetUserSubscription",
			Handler:    _UserService_GetUserSubscription_Handler,
		},
		{
			MethodName: "UpdateUserSubscription",
			Handler:    _UserService_UpdateUserSubscription_Handler,
		},
		{
			MethodName: "CreateUserSubscription",
			Handler:    _UserService_CreateUserSubscription_Handler,
		},
		{
			MethodName: "FindOrCreateUserSubscription",
			Handler:    _UserService_FindOrCreateUserSubscription_Handler,
		},
		{
			MethodName: "GetBirthdayUsersOfCurrentMonth",
			Handler:    _UserService_GetBirthdayUsersOfCurrentMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/core/user_core.proto",
}
