// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.5
// source: user/core/user_core.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message representing a user
type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Firstname     string                 `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname      string                 `protobuf:"bytes,4,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Channel       string                 `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Phone         string                 `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_user_core_user_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *User) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *User) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type Profile struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Birthday                   string                 `protobuf:"bytes,1,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Occupation                 string                 `protobuf:"bytes,2,opt,name=occupation,proto3" json:"occupation,omitempty"`
	HousingType                string                 `protobuf:"bytes,3,opt,name=housing_type,json=housingType,proto3" json:"housing_type,omitempty"`
	HomeSize                   string                 `protobuf:"bytes,4,opt,name=home_size,json=homeSize,proto3" json:"home_size,omitempty"`
	MostTimeSpentLocation      string                 `protobuf:"bytes,5,opt,name=most_time_spent_location,json=mostTimeSpentLocation,proto3" json:"most_time_spent_location,omitempty"`
	AnnualHouseholdIncome      string                 `protobuf:"bytes,6,opt,name=annual_household_income,json=annualHouseholdIncome,proto3" json:"annual_household_income,omitempty"`
	DisplayProfileRewardBanner bool                   `protobuf:"varint,7,opt,name=display_profile_reward_banner,json=displayProfileRewardBanner,proto3" json:"display_profile_reward_banner,omitempty"`
	IsInitialRecord            bool                   `protobuf:"varint,8,opt,name=is_initial_record,json=isInitialRecord,proto3" json:"is_initial_record,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Profile) Reset() {
	*x = Profile{}
	mi := &file_user_core_user_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *Profile) GetOccupation() string {
	if x != nil {
		return x.Occupation
	}
	return ""
}

func (x *Profile) GetHousingType() string {
	if x != nil {
		return x.HousingType
	}
	return ""
}

func (x *Profile) GetHomeSize() string {
	if x != nil {
		return x.HomeSize
	}
	return ""
}

func (x *Profile) GetMostTimeSpentLocation() string {
	if x != nil {
		return x.MostTimeSpentLocation
	}
	return ""
}

func (x *Profile) GetAnnualHouseholdIncome() string {
	if x != nil {
		return x.AnnualHouseholdIncome
	}
	return ""
}

func (x *Profile) GetDisplayProfileRewardBanner() bool {
	if x != nil {
		return x.DisplayProfileRewardBanner
	}
	return false
}

func (x *Profile) GetIsInitialRecord() bool {
	if x != nil {
		return x.IsInitialRecord
	}
	return false
}

type UpdateProfileRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Birthday              string                 `protobuf:"bytes,1,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Occupation            string                 `protobuf:"bytes,2,opt,name=occupation,proto3" json:"occupation,omitempty"`
	HousingType           string                 `protobuf:"bytes,3,opt,name=housing_type,json=housingType,proto3" json:"housing_type,omitempty"`
	HomeSize              string                 `protobuf:"bytes,4,opt,name=home_size,json=homeSize,proto3" json:"home_size,omitempty"`
	MostTimeSpentLocation string                 `protobuf:"bytes,5,opt,name=most_time_spent_location,json=mostTimeSpentLocation,proto3" json:"most_time_spent_location,omitempty"`
	AnnualHouseholdIncome string                 `protobuf:"bytes,6,opt,name=annual_household_income,json=annualHouseholdIncome,proto3" json:"annual_household_income,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateProfileRequest) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UpdateProfileRequest) GetOccupation() string {
	if x != nil {
		return x.Occupation
	}
	return ""
}

func (x *UpdateProfileRequest) GetHousingType() string {
	if x != nil {
		return x.HousingType
	}
	return ""
}

func (x *UpdateProfileRequest) GetHomeSize() string {
	if x != nil {
		return x.HomeSize
	}
	return ""
}

func (x *UpdateProfileRequest) GetMostTimeSpentLocation() string {
	if x != nil {
		return x.MostTimeSpentLocation
	}
	return ""
}

func (x *UpdateProfileRequest) GetAnnualHouseholdIncome() string {
	if x != nil {
		return x.AnnualHouseholdIncome
	}
	return ""
}

// Request message for UpdateUser RPC
type UpdateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Firstname     string                 `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname      string                 `protobuf:"bytes,4,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Phone         *string                `protobuf:"bytes,6,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Password      string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	NewPassword   string                 `protobuf:"bytes,8,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	Profile       *UpdateProfileRequest  `protobuf:"bytes,9,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserRequest) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UpdateUserRequest) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *UpdateUserRequest) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UpdateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *UpdateUserRequest) GetProfile() *UpdateProfileRequest {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Response message for UpdateUser RPC
type UpdateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Profile       *Profile               `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateUserResponse) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Request message for GetUser RPC
type GetUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for GetUser RPC
type GetUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Profile       *Profile               `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Country       *string                `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	CrusaderId    *uint32                `protobuf:"varint,4,opt,name=crusader_id,json=crusaderId,proto3,oneof" json:"crusader_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetUserResponse) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *GetUserResponse) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *GetUserResponse) GetCrusaderId() uint32 {
	if x != nil && x.CrusaderId != nil {
		return *x.CrusaderId
	}
	return 0
}

// Request message for GetUser RPC
type GetUserAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserAddressesRequest) Reset() {
	*x = GetUserAddressesRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAddressesRequest) ProtoMessage() {}

func (x *GetUserAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAddressesRequest.ProtoReflect.Descriptor instead.
func (*GetUserAddressesRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserAddressesRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for GetUser RPC
type GetUserAddressesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*UserAddress         `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserAddressesResponse) Reset() {
	*x = GetUserAddressesResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAddressesResponse) ProtoMessage() {}

func (x *GetUserAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAddressesResponse.ProtoReflect.Descriptor instead.
func (*GetUserAddressesResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserAddressesResponse) GetAddresses() []*UserAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type UpdateUserAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *uint32                `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Address       *UserAddress           `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserAddressRequest) Reset() {
	*x = UpdateUserAddressRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAddressRequest) ProtoMessage() {}

func (x *UpdateUserAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserAddressRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserAddressRequest) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UpdateUserAddressRequest) GetAddress() *UserAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type UpdateUserAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserAddressResponse) Reset() {
	*x = UpdateUserAddressResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAddressResponse) ProtoMessage() {}

func (x *UpdateUserAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAddressResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserAddressResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{10}
}

type GetAddressByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressId     uint32                 `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"` // Address ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressByIdRequest) Reset() {
	*x = GetAddressByIdRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByIdRequest) ProtoMessage() {}

func (x *GetAddressByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByIdRequest.ProtoReflect.Descriptor instead.
func (*GetAddressByIdRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{11}
}

func (x *GetAddressByIdRequest) GetAddressId() uint32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type GetAddressByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *UserAddress           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressByIdResponse) Reset() {
	*x = GetAddressByIdResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByIdResponse) ProtoMessage() {}

func (x *GetAddressByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByIdResponse.ProtoReflect.Descriptor instead.
func (*GetAddressByIdResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{12}
}

func (x *GetAddressByIdResponse) GetAddress() *UserAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type UserAddress struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GooglePlaceId    string                 `protobuf:"bytes,2,opt,name=google_place_id,json=googlePlaceId,proto3" json:"google_place_id,omitempty"`
	Firstname        string                 `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname         string                 `protobuf:"bytes,4,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Phone            string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	AlternativePhone string                 `protobuf:"bytes,6,opt,name=alternative_phone,json=alternativePhone,proto3" json:"alternative_phone,omitempty"`
	Company          string                 `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`
	Street           string                 `protobuf:"bytes,9,opt,name=street,proto3" json:"street,omitempty"`
	Address1         string                 `protobuf:"bytes,10,opt,name=address1,proto3" json:"address1,omitempty"`
	Address2         string                 `protobuf:"bytes,11,opt,name=address2,proto3" json:"address2,omitempty"`
	City             string                 `protobuf:"bytes,12,opt,name=city,proto3" json:"city,omitempty"`
	Zipcode          string                 `protobuf:"bytes,13,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country          string                 `protobuf:"bytes,14,opt,name=country,proto3" json:"country,omitempty"`
	StateName        string                 `protobuf:"bytes,15,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	BuildingType     string                 `protobuf:"bytes,16,opt,name=building_type,json=buildingType,proto3" json:"building_type,omitempty"`
	Flat             string                 `protobuf:"bytes,17,opt,name=flat,proto3" json:"flat,omitempty"`
	Level            string                 `protobuf:"bytes,18,opt,name=level,proto3" json:"level,omitempty"`
	IsValid          bool                   `protobuf:"varint,19,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsShippable      bool                   `protobuf:"varint,20,opt,name=is_shippable,json=isShippable,proto3" json:"is_shippable,omitempty"`
	IsManual         bool                   `protobuf:"varint,21,opt,name=is_manual,json=isManual,proto3" json:"is_manual,omitempty"`
	IsTemporary      bool                   `protobuf:"varint,22,opt,name=is_temporary,json=isTemporary,proto3" json:"is_temporary,omitempty"`
	BuildingName     string                 `protobuf:"bytes,23,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	StreetNumber     string                 `protobuf:"bytes,24,opt,name=street_number,json=streetNumber,proto3" json:"street_number,omitempty"`
	CreatedAt        int64                  `protobuf:"varint,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // seconds, utc, timestamp
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserAddress) Reset() {
	*x = UserAddress{}
	mi := &file_user_core_user_core_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAddress) ProtoMessage() {}

func (x *UserAddress) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAddress.ProtoReflect.Descriptor instead.
func (*UserAddress) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{13}
}

func (x *UserAddress) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAddress) GetGooglePlaceId() string {
	if x != nil {
		return x.GooglePlaceId
	}
	return ""
}

func (x *UserAddress) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UserAddress) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *UserAddress) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserAddress) GetAlternativePhone() string {
	if x != nil {
		return x.AlternativePhone
	}
	return ""
}

func (x *UserAddress) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *UserAddress) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *UserAddress) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *UserAddress) GetAddress2() string {
	if x != nil {
		return x.Address2
	}
	return ""
}

func (x *UserAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserAddress) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *UserAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserAddress) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *UserAddress) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *UserAddress) GetFlat() string {
	if x != nil {
		return x.Flat
	}
	return ""
}

func (x *UserAddress) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *UserAddress) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *UserAddress) GetIsShippable() bool {
	if x != nil {
		return x.IsShippable
	}
	return false
}

func (x *UserAddress) GetIsManual() bool {
	if x != nil {
		return x.IsManual
	}
	return false
}

func (x *UserAddress) GetIsTemporary() bool {
	if x != nil {
		return x.IsTemporary
	}
	return false
}

func (x *UserAddress) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *UserAddress) GetStreetNumber() string {
	if x != nil {
		return x.StreetNumber
	}
	return ""
}

func (x *UserAddress) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type DeleteUserAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserAddressResponse) Reset() {
	*x = DeleteUserAddressResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserAddressResponse) ProtoMessage() {}

func (x *DeleteUserAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserAddressResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserAddressResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{14}
}

type DeleteUserAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserAddressRequest) Reset() {
	*x = DeleteUserAddressRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserAddressRequest) ProtoMessage() {}

func (x *DeleteUserAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserAddressRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserAddressRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteUserAddressRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteUserAddressRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateUserAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserAddressResponse) Reset() {
	*x = CreateUserAddressResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserAddressResponse) ProtoMessage() {}

func (x *CreateUserAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateUserAddressResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{16}
}

type CreateUserAddressRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GooglePlaceId    *string                `protobuf:"bytes,2,opt,name=google_place_id,json=googlePlaceId,proto3,oneof" json:"google_place_id,omitempty"`
	Firstname        string                 `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname         string                 `protobuf:"bytes,4,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Company          *string                `protobuf:"bytes,5,opt,name=company,proto3,oneof" json:"company,omitempty"`
	Street           *string                `protobuf:"bytes,6,opt,name=street,proto3,oneof" json:"street,omitempty"`
	Address1         string                 `protobuf:"bytes,7,opt,name=address1,proto3" json:"address1,omitempty"`
	Address2         *string                `protobuf:"bytes,8,opt,name=address2,proto3,oneof" json:"address2,omitempty"`
	City             string                 `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	Zipcode          string                 `protobuf:"bytes,10,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country          string                 `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	StateName        *string                `protobuf:"bytes,12,opt,name=state_name,json=stateName,proto3,oneof" json:"state_name,omitempty"`
	BuildingType     *string                `protobuf:"bytes,13,opt,name=building_type,json=buildingType,proto3,oneof" json:"building_type,omitempty"`
	Flat             *string                `protobuf:"bytes,14,opt,name=flat,proto3,oneof" json:"flat,omitempty"`
	Level            *string                `protobuf:"bytes,15,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Phone            string                 `protobuf:"bytes,16,opt,name=phone,proto3" json:"phone,omitempty"`
	AlternativePhone *string                `protobuf:"bytes,17,opt,name=alternative_phone,json=alternativePhone,proto3,oneof" json:"alternative_phone,omitempty"`
	BuildingName     *string                `protobuf:"bytes,18,opt,name=building_name,json=buildingName,proto3,oneof" json:"building_name,omitempty"`
	StreetNumber     *string                `protobuf:"bytes,19,opt,name=street_number,json=streetNumber,proto3,oneof" json:"street_number,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateUserAddressRequest) Reset() {
	*x = CreateUserAddressRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserAddressRequest) ProtoMessage() {}

func (x *CreateUserAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateUserAddressRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{17}
}

func (x *CreateUserAddressRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateUserAddressRequest) GetGooglePlaceId() string {
	if x != nil && x.GooglePlaceId != nil {
		return *x.GooglePlaceId
	}
	return ""
}

func (x *CreateUserAddressRequest) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *CreateUserAddressRequest) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *CreateUserAddressRequest) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *CreateUserAddressRequest) GetStreet() string {
	if x != nil && x.Street != nil {
		return *x.Street
	}
	return ""
}

func (x *CreateUserAddressRequest) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *CreateUserAddressRequest) GetAddress2() string {
	if x != nil && x.Address2 != nil {
		return *x.Address2
	}
	return ""
}

func (x *CreateUserAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateUserAddressRequest) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *CreateUserAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateUserAddressRequest) GetStateName() string {
	if x != nil && x.StateName != nil {
		return *x.StateName
	}
	return ""
}

func (x *CreateUserAddressRequest) GetBuildingType() string {
	if x != nil && x.BuildingType != nil {
		return *x.BuildingType
	}
	return ""
}

func (x *CreateUserAddressRequest) GetFlat() string {
	if x != nil && x.Flat != nil {
		return *x.Flat
	}
	return ""
}

func (x *CreateUserAddressRequest) GetLevel() string {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ""
}

func (x *CreateUserAddressRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreateUserAddressRequest) GetAlternativePhone() string {
	if x != nil && x.AlternativePhone != nil {
		return *x.AlternativePhone
	}
	return ""
}

func (x *CreateUserAddressRequest) GetBuildingName() string {
	if x != nil && x.BuildingName != nil {
		return *x.BuildingName
	}
	return ""
}

func (x *CreateUserAddressRequest) GetStreetNumber() string {
	if x != nil && x.StreetNumber != nil {
		return *x.StreetNumber
	}
	return ""
}

// ImageLinks 定义了产品图片的不同尺寸链接
type ImageLinks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mini          string                 `protobuf:"bytes,1,opt,name=mini,proto3" json:"mini,omitempty"`                                        // 小尺寸图片链接
	Small         string                 `protobuf:"bytes,2,opt,name=small,proto3" json:"small,omitempty"`                                      // 小尺寸图片链接
	Medium        string                 `protobuf:"bytes,3,opt,name=medium,proto3" json:"medium,omitempty"`                                    // 中尺寸图片链接
	Large         string                 `protobuf:"bytes,4,opt,name=large,proto3" json:"large,omitempty"`                                      // 大尺寸图片链接
	MiniX2        string                 `protobuf:"bytes,5,opt,name=mini_x2,json=miniX2,proto3" json:"mini_x2,omitempty"`                      // 小尺寸2倍图片链接
	SmallX2       string                 `protobuf:"bytes,6,opt,name=small_x2,json=smallX2,proto3" json:"small_x2,omitempty"`                   // 小尺寸2倍图片链接
	MediumX2      string                 `protobuf:"bytes,7,opt,name=medium_x2,json=mediumX2,proto3" json:"medium_x2,omitempty"`                // 中尺寸2倍图片链接
	LargeX2       string                 `protobuf:"bytes,8,opt,name=large_x2,json=largeX2,proto3" json:"large_x2,omitempty"`                   // 大尺寸2倍图片链接
	MiniGray      string                 `protobuf:"bytes,9,opt,name=mini_gray,json=miniGray,proto3" json:"mini_gray,omitempty"`                // 小尺寸灰度图片链接
	SmallGray     string                 `protobuf:"bytes,10,opt,name=small_gray,json=smallGray,proto3" json:"small_gray,omitempty"`            // 小尺寸灰度图片链接
	MediumGray    string                 `protobuf:"bytes,11,opt,name=medium_gray,json=mediumGray,proto3" json:"medium_gray,omitempty"`         // 中尺寸灰度图片链接
	LargeGray     string                 `protobuf:"bytes,12,opt,name=large_gray,json=largeGray,proto3" json:"large_gray,omitempty"`            // 大尺寸灰度图片链接
	MiniX2Gray    string                 `protobuf:"bytes,13,opt,name=mini_x2_gray,json=miniX2Gray,proto3" json:"mini_x2_gray,omitempty"`       // 小尺寸2倍灰度图片链接
	SmallX2Gray   string                 `protobuf:"bytes,14,opt,name=small_x2_gray,json=smallX2Gray,proto3" json:"small_x2_gray,omitempty"`    // 小尺寸2倍灰度图片链接
	MediumX2Gray  string                 `protobuf:"bytes,15,opt,name=medium_x2_gray,json=mediumX2Gray,proto3" json:"medium_x2_gray,omitempty"` // 中尺寸2倍灰度图片链接
	LargeX2Gray   string                 `protobuf:"bytes,16,opt,name=large_x2_gray,json=largeX2Gray,proto3" json:"large_x2_gray,omitempty"`    // 大尺寸2倍灰度图片链接
	Feed          string                 `protobuf:"bytes,17,opt,name=feed,proto3" json:"feed,omitempty"`                                       // Feed 图片链接
	Public        string                 `protobuf:"bytes,18,opt,name=public,proto3" json:"public,omitempty"`                                   // 公共图片链接
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageLinks) Reset() {
	*x = ImageLinks{}
	mi := &file_user_core_user_core_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageLinks) ProtoMessage() {}

func (x *ImageLinks) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageLinks.ProtoReflect.Descriptor instead.
func (*ImageLinks) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{18}
}

func (x *ImageLinks) GetMini() string {
	if x != nil {
		return x.Mini
	}
	return ""
}

func (x *ImageLinks) GetSmall() string {
	if x != nil {
		return x.Small
	}
	return ""
}

func (x *ImageLinks) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *ImageLinks) GetLarge() string {
	if x != nil {
		return x.Large
	}
	return ""
}

func (x *ImageLinks) GetMiniX2() string {
	if x != nil {
		return x.MiniX2
	}
	return ""
}

func (x *ImageLinks) GetSmallX2() string {
	if x != nil {
		return x.SmallX2
	}
	return ""
}

func (x *ImageLinks) GetMediumX2() string {
	if x != nil {
		return x.MediumX2
	}
	return ""
}

func (x *ImageLinks) GetLargeX2() string {
	if x != nil {
		return x.LargeX2
	}
	return ""
}

func (x *ImageLinks) GetMiniGray() string {
	if x != nil {
		return x.MiniGray
	}
	return ""
}

func (x *ImageLinks) GetSmallGray() string {
	if x != nil {
		return x.SmallGray
	}
	return ""
}

func (x *ImageLinks) GetMediumGray() string {
	if x != nil {
		return x.MediumGray
	}
	return ""
}

func (x *ImageLinks) GetLargeGray() string {
	if x != nil {
		return x.LargeGray
	}
	return ""
}

func (x *ImageLinks) GetMiniX2Gray() string {
	if x != nil {
		return x.MiniX2Gray
	}
	return ""
}

func (x *ImageLinks) GetSmallX2Gray() string {
	if x != nil {
		return x.SmallX2Gray
	}
	return ""
}

func (x *ImageLinks) GetMediumX2Gray() string {
	if x != nil {
		return x.MediumX2Gray
	}
	return ""
}

func (x *ImageLinks) GetLargeX2Gray() string {
	if x != nil {
		return x.LargeX2Gray
	}
	return ""
}

func (x *ImageLinks) GetFeed() string {
	if x != nil {
		return x.Feed
	}
	return ""
}

func (x *ImageLinks) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

// Image 定义了产品图片信息
type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`             // 图片ID
	Position      uint32                 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"` // 图片位置
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`          // 图片类型
	Links         string                 `protobuf:"bytes,4,opt,name=links,proto3" json:"links,omitempty"`        // 图片链接
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_user_core_user_core_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{19}
}

func (x *Image) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Image) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Image) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Image) GetLinks() string {
	if x != nil {
		return x.Links
	}
	return ""
}

// VariantOptionValue 定义了产品变体选项值
type VariantOptionValue struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	OptionValueId          uint32                 `protobuf:"varint,1,opt,name=option_value_id,json=optionValueId,proto3" json:"option_value_id,omitempty"`                           // 选项值ID
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                     // 选项值名称
	Presentation           string                 `protobuf:"bytes,3,opt,name=presentation,proto3" json:"presentation,omitempty"`                                                     // 选项值展示名称
	OptionTypeId           uint32                 `protobuf:"varint,4,opt,name=option_type_id,json=optionTypeId,proto3" json:"option_type_id,omitempty"`                              // 选项类型ID
	OptionTypeName         string                 `protobuf:"bytes,5,opt,name=option_type_name,json=optionTypeName,proto3" json:"option_type_name,omitempty"`                         // 选项类型名称
	OptionTypePresentation string                 `protobuf:"bytes,6,opt,name=option_type_presentation,json=optionTypePresentation,proto3" json:"option_type_presentation,omitempty"` // 选项类型展示名称
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VariantOptionValue) Reset() {
	*x = VariantOptionValue{}
	mi := &file_user_core_user_core_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VariantOptionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariantOptionValue) ProtoMessage() {}

func (x *VariantOptionValue) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariantOptionValue.ProtoReflect.Descriptor instead.
func (*VariantOptionValue) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{20}
}

func (x *VariantOptionValue) GetOptionValueId() uint32 {
	if x != nil {
		return x.OptionValueId
	}
	return 0
}

func (x *VariantOptionValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariantOptionValue) GetPresentation() string {
	if x != nil {
		return x.Presentation
	}
	return ""
}

func (x *VariantOptionValue) GetOptionTypeId() uint32 {
	if x != nil {
		return x.OptionTypeId
	}
	return 0
}

func (x *VariantOptionValue) GetOptionTypeName() string {
	if x != nil {
		return x.OptionTypeName
	}
	return ""
}

func (x *VariantOptionValue) GetOptionTypePresentation() string {
	if x != nil {
		return x.OptionTypePresentation
	}
	return ""
}

// VariantInfo 定义了产品信息
type VariantInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	VariantId           uint32                 `protobuf:"varint,1,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`                                 // 产品ID
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                             // 产品名称
	Sku                 string                 `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`                                                               // 产品SKU
	Price               string                 `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`                                                           // 产品价格
	ListPrice           string                 `protobuf:"bytes,5,opt,name=list_price,json=listPrice,proto3" json:"list_price,omitempty"`                                  // 产品列表价格
	ProductId           uint32                 `protobuf:"varint,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                 // 产品ID
	ProductLayout       string                 `protobuf:"bytes,10,opt,name=product_layout,json=productLayout,proto3" json:"product_layout,omitempty"`                     // 产品布局
	ProductName         string                 `protobuf:"bytes,12,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           // 产品名称
	ProductType         string                 `protobuf:"bytes,13,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`                           // 产品类型
	Badges              []string               `protobuf:"bytes,19,rep,name=badges,proto3" json:"badges,omitempty"`                                                        // 产品徽章
	Images              []*Image               `protobuf:"bytes,20,rep,name=images,proto3" json:"images,omitempty"`                                                        // 产品图片
	VariantOptionValues []*VariantOptionValue  `protobuf:"bytes,21,rep,name=variant_option_values,json=variantOptionValues,proto3" json:"variant_option_values,omitempty"` // 产品变体选项值
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VariantInfo) Reset() {
	*x = VariantInfo{}
	mi := &file_user_core_user_core_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VariantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariantInfo) ProtoMessage() {}

func (x *VariantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariantInfo.ProtoReflect.Descriptor instead.
func (*VariantInfo) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{21}
}

func (x *VariantInfo) GetVariantId() uint32 {
	if x != nil {
		return x.VariantId
	}
	return 0
}

func (x *VariantInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariantInfo) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *VariantInfo) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *VariantInfo) GetListPrice() string {
	if x != nil {
		return x.ListPrice
	}
	return ""
}

func (x *VariantInfo) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *VariantInfo) GetProductLayout() string {
	if x != nil {
		return x.ProductLayout
	}
	return ""
}

func (x *VariantInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *VariantInfo) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *VariantInfo) GetBadges() []string {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *VariantInfo) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *VariantInfo) GetVariantOptionValues() []*VariantOptionValue {
	if x != nil {
		return x.VariantOptionValues
	}
	return nil
}

// GetWishItemsRequest 定义了获取收藏清单请求
type GetWishItemVariantsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWishItemVariantsRequest) Reset() {
	*x = GetWishItemVariantsRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWishItemVariantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishItemVariantsRequest) ProtoMessage() {}

func (x *GetWishItemVariantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishItemVariantsRequest.ProtoReflect.Descriptor instead.
func (*GetWishItemVariantsRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{22}
}

func (x *GetWishItemVariantsRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// GetWishItemsResponse 定义了获取收藏清单响应
type GetWishItemVariantsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Variants      []uint32               `protobuf:"varint,1,rep,packed,name=variants,proto3" json:"variants,omitempty"` // 变体列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWishItemVariantsResponse) Reset() {
	*x = GetWishItemVariantsResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWishItemVariantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishItemVariantsResponse) ProtoMessage() {}

func (x *GetWishItemVariantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishItemVariantsResponse.ProtoReflect.Descriptor instead.
func (*GetWishItemVariantsResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{23}
}

func (x *GetWishItemVariantsResponse) GetVariants() []uint32 {
	if x != nil {
		return x.Variants
	}
	return nil
}

// AddWishItemRequest 定义了添加收藏清单请求
type DeleteWishItemVariantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户ID
	VariantId     uint32                 `protobuf:"varint,2,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"` // 变体ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishItemVariantRequest) Reset() {
	*x = DeleteWishItemVariantRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishItemVariantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishItemVariantRequest) ProtoMessage() {}

func (x *DeleteWishItemVariantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishItemVariantRequest.ProtoReflect.Descriptor instead.
func (*DeleteWishItemVariantRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteWishItemVariantRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteWishItemVariantRequest) GetVariantId() uint32 {
	if x != nil {
		return x.VariantId
	}
	return 0
}

// AddWishItemResponse 定义了添加收藏清单响应
type DeleteWishItemVariantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishItemVariantResponse) Reset() {
	*x = DeleteWishItemVariantResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishItemVariantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishItemVariantResponse) ProtoMessage() {}

func (x *DeleteWishItemVariantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishItemVariantResponse.ProtoReflect.Descriptor instead.
func (*DeleteWishItemVariantResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{25}
}

// BatchAddWishItemRequest 定义了批量添加收藏清单请求
type BatchAddWishItemVariantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 // 用户ID
	VariantId     []uint32               `protobuf:"varint,2,rep,packed,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"` // 变体ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAddWishItemVariantRequest) Reset() {
	*x = BatchAddWishItemVariantRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAddWishItemVariantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddWishItemVariantRequest) ProtoMessage() {}

func (x *BatchAddWishItemVariantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddWishItemVariantRequest.ProtoReflect.Descriptor instead.
func (*BatchAddWishItemVariantRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{26}
}

func (x *BatchAddWishItemVariantRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BatchAddWishItemVariantRequest) GetVariantId() []uint32 {
	if x != nil {
		return x.VariantId
	}
	return nil
}

// BatchAddWishItemResponse 定义了批量添加收藏清单响应
type BatchAddWishItemVariantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAddWishItemVariantResponse) Reset() {
	*x = BatchAddWishItemVariantResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAddWishItemVariantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddWishItemVariantResponse) ProtoMessage() {}

func (x *BatchAddWishItemVariantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddWishItemVariantResponse.ProtoReflect.Descriptor instead.
func (*BatchAddWishItemVariantResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{27}
}

// WishLookInfo 定义了收藏look信息
type WishLookInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ShopTheLookId  string                 `protobuf:"bytes,1,opt,name=shop_the_look_id,json=shopTheLookId,proto3" json:"shop_the_look_id,omitempty"` // ShopTheLookId
	BackgroudImage string                 `protobuf:"bytes,2,opt,name=backgroud_image,json=backgroudImage,proto3" json:"backgroud_image,omitempty"`  // 背景图片
	Variants       []uint32               `protobuf:"varint,3,rep,packed,name=variants,proto3" json:"variants,omitempty"`                            // 变体ID列表
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WishLookInfo) Reset() {
	*x = WishLookInfo{}
	mi := &file_user_core_user_core_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WishLookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishLookInfo) ProtoMessage() {}

func (x *WishLookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishLookInfo.ProtoReflect.Descriptor instead.
func (*WishLookInfo) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{28}
}

func (x *WishLookInfo) GetShopTheLookId() string {
	if x != nil {
		return x.ShopTheLookId
	}
	return ""
}

func (x *WishLookInfo) GetBackgroudImage() string {
	if x != nil {
		return x.BackgroudImage
	}
	return ""
}

func (x *WishLookInfo) GetVariants() []uint32 {
	if x != nil {
		return x.Variants
	}
	return nil
}

// GetWishLooksInfoByUserRequest 定义了获取收藏look信息请求
type GetWishLooksInfoByUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWishLooksInfoByUserRequest) Reset() {
	*x = GetWishLooksInfoByUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWishLooksInfoByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishLooksInfoByUserRequest) ProtoMessage() {}

func (x *GetWishLooksInfoByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishLooksInfoByUserRequest.ProtoReflect.Descriptor instead.
func (*GetWishLooksInfoByUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{29}
}

func (x *GetWishLooksInfoByUserRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// GetWishLooksInfoByUserResponse 定义了获取收藏look信息响应
type GetWishLooksInfoByUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WishLooks     []*WishLookInfo        `protobuf:"bytes,1,rep,name=wish_looks,json=wishLooks,proto3" json:"wish_looks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWishLooksInfoByUserResponse) Reset() {
	*x = GetWishLooksInfoByUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWishLooksInfoByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishLooksInfoByUserResponse) ProtoMessage() {}

func (x *GetWishLooksInfoByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishLooksInfoByUserResponse.ProtoReflect.Descriptor instead.
func (*GetWishLooksInfoByUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{30}
}

func (x *GetWishLooksInfoByUserResponse) GetWishLooks() []*WishLookInfo {
	if x != nil {
		return x.WishLooks
	}
	return nil
}

// DeleteWishLookRequest 定义了删除收藏look请求
type DeleteWishLookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	ShopTheLookId string                 `protobuf:"bytes,2,opt,name=shop_the_look_id,json=shopTheLookId,proto3" json:"shop_the_look_id,omitempty"` // ShopTheLookId
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishLookRequest) Reset() {
	*x = DeleteWishLookRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishLookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishLookRequest) ProtoMessage() {}

func (x *DeleteWishLookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishLookRequest.ProtoReflect.Descriptor instead.
func (*DeleteWishLookRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteWishLookRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteWishLookRequest) GetShopTheLookId() string {
	if x != nil {
		return x.ShopTheLookId
	}
	return ""
}

// DeleteWishLookResponse 定义了删除收藏look响应
type DeleteWishLookResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishLookResponse) Reset() {
	*x = DeleteWishLookResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishLookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishLookResponse) ProtoMessage() {}

func (x *DeleteWishLookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishLookResponse.ProtoReflect.Descriptor instead.
func (*DeleteWishLookResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{32}
}

// BatchAddWishLookRequest 定义了批量添加收藏look请求
type BatchAddWishLookRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	UserId        uint32                   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                                                // 用户ID
	LookIdToInfo  map[string]*WishLookInfo `protobuf:"bytes,2,rep,name=look_id_to_info,json=lookIdToInfo,proto3" json:"look_id_to_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // lookIdToImage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAddWishLookRequest) Reset() {
	*x = BatchAddWishLookRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAddWishLookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddWishLookRequest) ProtoMessage() {}

func (x *BatchAddWishLookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddWishLookRequest.ProtoReflect.Descriptor instead.
func (*BatchAddWishLookRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{33}
}

func (x *BatchAddWishLookRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BatchAddWishLookRequest) GetLookIdToInfo() map[string]*WishLookInfo {
	if x != nil {
		return x.LookIdToInfo
	}
	return nil
}

// BatchAddWishLookResponse 定义了批量添加收藏look响应
type BatchAddWishLookResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAddWishLookResponse) Reset() {
	*x = BatchAddWishLookResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAddWishLookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddWishLookResponse) ProtoMessage() {}

func (x *BatchAddWishLookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddWishLookResponse.ProtoReflect.Descriptor instead.
func (*BatchAddWishLookResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{34}
}

type GetTermsOfUseLogsByUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market        string                 `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTermsOfUseLogsByUserRequest) Reset() {
	*x = GetTermsOfUseLogsByUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTermsOfUseLogsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTermsOfUseLogsByUserRequest) ProtoMessage() {}

func (x *GetTermsOfUseLogsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTermsOfUseLogsByUserRequest.ProtoReflect.Descriptor instead.
func (*GetTermsOfUseLogsByUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{35}
}

func (x *GetTermsOfUseLogsByUserRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetTermsOfUseLogsByUserRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

type GetTermsOfUseLogsByUserResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TermsOfUseLogs []*TermsOfUseLog       `protobuf:"bytes,1,rep,name=terms_of_use_logs,json=termsOfUseLogs,proto3" json:"terms_of_use_logs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTermsOfUseLogsByUserResponse) Reset() {
	*x = GetTermsOfUseLogsByUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTermsOfUseLogsByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTermsOfUseLogsByUserResponse) ProtoMessage() {}

func (x *GetTermsOfUseLogsByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTermsOfUseLogsByUserResponse.ProtoReflect.Descriptor instead.
func (*GetTermsOfUseLogsByUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{36}
}

func (x *GetTermsOfUseLogsByUserResponse) GetTermsOfUseLogs() []*TermsOfUseLog {
	if x != nil {
		return x.TermsOfUseLogs
	}
	return nil
}

type GetLatestTermsOfUseLogByUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestTermsOfUseLogByUserRequest) Reset() {
	*x = GetLatestTermsOfUseLogByUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestTermsOfUseLogByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTermsOfUseLogByUserRequest) ProtoMessage() {}

func (x *GetLatestTermsOfUseLogByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTermsOfUseLogByUserRequest.ProtoReflect.Descriptor instead.
func (*GetLatestTermsOfUseLogByUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{37}
}

func (x *GetLatestTermsOfUseLogByUserRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLatestTermsOfUseLogByUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TermsOfUseLog *TermsOfUseLog         `protobuf:"bytes,1,opt,name=terms_of_use_log,json=termsOfUseLog,proto3" json:"terms_of_use_log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestTermsOfUseLogByUserResponse) Reset() {
	*x = GetLatestTermsOfUseLogByUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestTermsOfUseLogByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTermsOfUseLogByUserResponse) ProtoMessage() {}

func (x *GetLatestTermsOfUseLogByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTermsOfUseLogByUserResponse.ProtoReflect.Descriptor instead.
func (*GetLatestTermsOfUseLogByUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{38}
}

func (x *GetLatestTermsOfUseLogByUserResponse) GetTermsOfUseLog() *TermsOfUseLog {
	if x != nil {
		return x.TermsOfUseLog
	}
	return nil
}

type FindOrCreateTermsOfUseLogByUserRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market          string                 `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	AcceptedVersion string                 `protobuf:"bytes,3,opt,name=accepted_version,json=acceptedVersion,proto3" json:"accepted_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FindOrCreateTermsOfUseLogByUserRequest) Reset() {
	*x = FindOrCreateTermsOfUseLogByUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOrCreateTermsOfUseLogByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOrCreateTermsOfUseLogByUserRequest) ProtoMessage() {}

func (x *FindOrCreateTermsOfUseLogByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOrCreateTermsOfUseLogByUserRequest.ProtoReflect.Descriptor instead.
func (*FindOrCreateTermsOfUseLogByUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{39}
}

func (x *FindOrCreateTermsOfUseLogByUserRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindOrCreateTermsOfUseLogByUserRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *FindOrCreateTermsOfUseLogByUserRequest) GetAcceptedVersion() string {
	if x != nil {
		return x.AcceptedVersion
	}
	return ""
}

type FindOrCreateTermsOfUseLogByUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TermsOfUseLog *TermsOfUseLog         `protobuf:"bytes,1,opt,name=terms_of_use_log,json=termsOfUseLog,proto3" json:"terms_of_use_log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindOrCreateTermsOfUseLogByUserResponse) Reset() {
	*x = FindOrCreateTermsOfUseLogByUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOrCreateTermsOfUseLogByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOrCreateTermsOfUseLogByUserResponse) ProtoMessage() {}

func (x *FindOrCreateTermsOfUseLogByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOrCreateTermsOfUseLogByUserResponse.ProtoReflect.Descriptor instead.
func (*FindOrCreateTermsOfUseLogByUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{40}
}

func (x *FindOrCreateTermsOfUseLogByUserResponse) GetTermsOfUseLog() *TermsOfUseLog {
	if x != nil {
		return x.TermsOfUseLog
	}
	return nil
}

type TermsOfUseLog struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Market          string                 `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	AcceptedVersion string                 `protobuf:"bytes,4,opt,name=accepted_version,json=acceptedVersion,proto3" json:"accepted_version,omitempty"`
	AcceptedAt      string                 `protobuf:"bytes,5,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TermsOfUseLog) Reset() {
	*x = TermsOfUseLog{}
	mi := &file_user_core_user_core_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermsOfUseLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsOfUseLog) ProtoMessage() {}

func (x *TermsOfUseLog) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsOfUseLog.ProtoReflect.Descriptor instead.
func (*TermsOfUseLog) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{41}
}

func (x *TermsOfUseLog) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TermsOfUseLog) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TermsOfUseLog) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *TermsOfUseLog) GetAcceptedVersion() string {
	if x != nil {
		return x.AcceptedVersion
	}
	return ""
}

func (x *TermsOfUseLog) GetAcceptedAt() string {
	if x != nil {
		return x.AcceptedAt
	}
	return ""
}

type GetUserByTokenRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// request.headers["X-Spree-Token"] || params[:token]
	Token *string `protobuf:"bytes,1,opt,name=token,proto3,oneof" json:"token,omitempty"`
	// By default it retrieves first from the `HTTP_AUTHORIZATION` header, then
	// falls back to the `:access_token` or `:bearer_token` params from the
	// `params` object. Check out the wiki for more information on customization
	// access_token_methods :from_bearer_authorization, :from_access_token_param,
	// :from_bearer_param add custom strategy to get access token from
	// X-Access-Token header request.headers["x-access-token"]
	AccessToken   *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserByTokenRequest) Reset() {
	*x = GetUserByTokenRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByTokenRequest) ProtoMessage() {}

func (x *GetUserByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByTokenRequest.ProtoReflect.Descriptor instead.
func (*GetUserByTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{42}
}

func (x *GetUserByTokenRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *GetUserByTokenRequest) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type GetUserByTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Firstname     string                 `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname      string                 `protobuf:"bytes,4,opt,name=lastname,proto3" json:"lastname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserByTokenResponse) Reset() {
	*x = GetUserByTokenResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserByTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByTokenResponse) ProtoMessage() {}

func (x *GetUserByTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByTokenResponse.ProtoReflect.Descriptor instead.
func (*GetUserByTokenResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{43}
}

func (x *GetUserByTokenResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserByTokenResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserByTokenResponse) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *GetUserByTokenResponse) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

type ProfileOptional struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Birthday                   *string                `protobuf:"bytes,1,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	Occupation                 *string                `protobuf:"bytes,2,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
	HousingType                *string                `protobuf:"bytes,3,opt,name=housing_type,json=housingType,proto3,oneof" json:"housing_type,omitempty"`
	HomeSize                   *string                `protobuf:"bytes,4,opt,name=home_size,json=homeSize,proto3,oneof" json:"home_size,omitempty"`
	MostTimeSpentLocation      *string                `protobuf:"bytes,5,opt,name=most_time_spent_location,json=mostTimeSpentLocation,proto3,oneof" json:"most_time_spent_location,omitempty"`
	AnnualHouseholdIncome      *string                `protobuf:"bytes,6,opt,name=annual_household_income,json=annualHouseholdIncome,proto3,oneof" json:"annual_household_income,omitempty"`
	DisplayProfileRewardBanner *bool                  `protobuf:"varint,7,opt,name=display_profile_reward_banner,json=displayProfileRewardBanner,proto3,oneof" json:"display_profile_reward_banner,omitempty"`
	IsInitialRecord            *bool                  `protobuf:"varint,8,opt,name=is_initial_record,json=isInitialRecord,proto3,oneof" json:"is_initial_record,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ProfileOptional) Reset() {
	*x = ProfileOptional{}
	mi := &file_user_core_user_core_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileOptional) ProtoMessage() {}

func (x *ProfileOptional) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileOptional.ProtoReflect.Descriptor instead.
func (*ProfileOptional) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{44}
}

func (x *ProfileOptional) GetBirthday() string {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return ""
}

func (x *ProfileOptional) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *ProfileOptional) GetHousingType() string {
	if x != nil && x.HousingType != nil {
		return *x.HousingType
	}
	return ""
}

func (x *ProfileOptional) GetHomeSize() string {
	if x != nil && x.HomeSize != nil {
		return *x.HomeSize
	}
	return ""
}

func (x *ProfileOptional) GetMostTimeSpentLocation() string {
	if x != nil && x.MostTimeSpentLocation != nil {
		return *x.MostTimeSpentLocation
	}
	return ""
}

func (x *ProfileOptional) GetAnnualHouseholdIncome() string {
	if x != nil && x.AnnualHouseholdIncome != nil {
		return *x.AnnualHouseholdIncome
	}
	return ""
}

func (x *ProfileOptional) GetDisplayProfileRewardBanner() bool {
	if x != nil && x.DisplayProfileRewardBanner != nil {
		return *x.DisplayProfileRewardBanner
	}
	return false
}

func (x *ProfileOptional) GetIsInitialRecord() bool {
	if x != nil && x.IsInitialRecord != nil {
		return *x.IsInitialRecord
	}
	return false
}

// Request message for CreateUserRequest RPC
type CreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Email         *string                `protobuf:"bytes,2,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Firstname     *string                `protobuf:"bytes,3,opt,name=firstname,proto3,oneof" json:"firstname,omitempty"`
	Lastname      *string                `protobuf:"bytes,4,opt,name=lastname,proto3,oneof" json:"lastname,omitempty"`
	Phone         *string                `protobuf:"bytes,6,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Password      *string                `protobuf:"bytes,7,opt,name=password,proto3,oneof" json:"password,omitempty"`
	NewPassword   *string                `protobuf:"bytes,8,opt,name=new_password,json=newPassword,proto3,oneof" json:"new_password,omitempty"`
	SystemCreated *bool                  `protobuf:"varint,9,opt,name=system_created,json=systemCreated,proto3,oneof" json:"system_created,omitempty"`
	Channel       *string                `protobuf:"bytes,10,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	Profile       *ProfileOptional       `protobuf:"bytes,11,opt,name=profile,proto3,oneof" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{45}
}

func (x *CreateUserRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetFirstname() string {
	if x != nil && x.Firstname != nil {
		return *x.Firstname
	}
	return ""
}

func (x *CreateUserRequest) GetLastname() string {
	if x != nil && x.Lastname != nil {
		return *x.Lastname
	}
	return ""
}

func (x *CreateUserRequest) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetNewPassword() string {
	if x != nil && x.NewPassword != nil {
		return *x.NewPassword
	}
	return ""
}

func (x *CreateUserRequest) GetSystemCreated() bool {
	if x != nil && x.SystemCreated != nil {
		return *x.SystemCreated
	}
	return false
}

func (x *CreateUserRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *CreateUserRequest) GetProfile() *ProfileOptional {
	if x != nil {
		return x.Profile
	}
	return nil
}

type AccessToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  *string                `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	ExpiresIn     *int64                 `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	AccessToken   *string                `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessToken) Reset() {
	*x = AccessToken{}
	mi := &file_user_core_user_core_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessToken) ProtoMessage() {}

func (x *AccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessToken.ProtoReflect.Descriptor instead.
func (*AccessToken) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{46}
}

func (x *AccessToken) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *AccessToken) GetExpiresIn() int64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *AccessToken) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *AccessToken) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

// Response message for CreateUserResponse RPC
type CreateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3,oneof" json:"user,omitempty"`
	AccessToken   *AccessToken           `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{47}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateUserResponse) GetAccessToken() *AccessToken {
	if x != nil {
		return x.AccessToken
	}
	return nil
}

// Request message for CreateUserRequest RPC
type UserAuthTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GrantType     *string                `protobuf:"bytes,1,opt,name=grant_type,json=grantType,proto3,oneof" json:"grant_type,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password      *string                `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAuthTokenRequest) Reset() {
	*x = UserAuthTokenRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAuthTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthTokenRequest) ProtoMessage() {}

func (x *UserAuthTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthTokenRequest.ProtoReflect.Descriptor instead.
func (*UserAuthTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{48}
}

func (x *UserAuthTokenRequest) GetGrantType() string {
	if x != nil && x.GrantType != nil {
		return *x.GrantType
	}
	return ""
}

func (x *UserAuthTokenRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UserAuthTokenRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

// Response message for CreateUserResponse RPC
type UserAuthTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  *string                `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	ExpiresIn     *int64                 `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	AccessToken   *string                `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	TokenType     *string                `protobuf:"bytes,5,opt,name=token_type,json=tokenType,proto3,oneof" json:"token_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAuthTokenResponse) Reset() {
	*x = UserAuthTokenResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAuthTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthTokenResponse) ProtoMessage() {}

func (x *UserAuthTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthTokenResponse.ProtoReflect.Descriptor instead.
func (*UserAuthTokenResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{49}
}

func (x *UserAuthTokenResponse) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *UserAuthTokenResponse) GetExpiresIn() int64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *UserAuthTokenResponse) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *UserAuthTokenResponse) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *UserAuthTokenResponse) GetTokenType() string {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return ""
}

// Request message for CreateUserRequest RPC
type AuthOrCreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      *string                `protobuf:"bytes,1,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	Uid           *string                `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Email         *string                `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	FirstName     *string                `protobuf:"bytes,4,opt,name=firstName,proto3,oneof" json:"firstName,omitempty"`
	LastName      *string                `protobuf:"bytes,5,opt,name=lastName,proto3,oneof" json:"lastName,omitempty"`
	Channel       *string                `protobuf:"bytes,6,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthOrCreateUserRequest) Reset() {
	*x = AuthOrCreateUserRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthOrCreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOrCreateUserRequest) ProtoMessage() {}

func (x *AuthOrCreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOrCreateUserRequest.ProtoReflect.Descriptor instead.
func (*AuthOrCreateUserRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{50}
}

func (x *AuthOrCreateUserRequest) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *AuthOrCreateUserRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *AuthOrCreateUserRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *AuthOrCreateUserRequest) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *AuthOrCreateUserRequest) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *AuthOrCreateUserRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

// Response message for CreateUserResponse RPC
type AuthOrCreateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  *string                `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	ExpiresIn     *int64                 `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	AccessToken   *string                `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	TokenType     *string                `protobuf:"bytes,5,opt,name=token_type,json=tokenType,proto3,oneof" json:"token_type,omitempty"`
	IsNewUser     *bool                  `protobuf:"varint,6,opt,name=is_new_user,json=isNewUser,proto3,oneof" json:"is_new_user,omitempty"`
	User          *User                  `protobuf:"bytes,7,opt,name=user,proto3,oneof" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthOrCreateUserResponse) Reset() {
	*x = AuthOrCreateUserResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthOrCreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOrCreateUserResponse) ProtoMessage() {}

func (x *AuthOrCreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOrCreateUserResponse.ProtoReflect.Descriptor instead.
func (*AuthOrCreateUserResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{51}
}

func (x *AuthOrCreateUserResponse) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *AuthOrCreateUserResponse) GetExpiresIn() int64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *AuthOrCreateUserResponse) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *AuthOrCreateUserResponse) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *AuthOrCreateUserResponse) GetTokenType() string {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return ""
}

func (x *AuthOrCreateUserResponse) GetIsNewUser() bool {
	if x != nil && x.IsNewUser != nil {
		return *x.IsNewUser
	}
	return false
}

func (x *AuthOrCreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserByQueryRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Email              *string                `protobuf:"bytes,1,opt,name=email,proto3,oneof" json:"email,omitempty"`
	ApiKey             *string                `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"` // spree api key
	ResetPasswordToken *string                `protobuf:"bytes,3,opt,name=reset_password_token,json=resetPasswordToken,proto3,oneof" json:"reset_password_token,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetUserByQueryRequest) Reset() {
	*x = GetUserByQueryRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserByQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByQueryRequest) ProtoMessage() {}

func (x *GetUserByQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByQueryRequest.ProtoReflect.Descriptor instead.
func (*GetUserByQueryRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{52}
}

func (x *GetUserByQueryRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *GetUserByQueryRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *GetUserByQueryRequest) GetResetPasswordToken() string {
	if x != nil && x.ResetPasswordToken != nil {
		return *x.ResetPasswordToken
	}
	return ""
}

type GetUserByQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Email         *string                `protobuf:"bytes,2,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Firstname     *string                `protobuf:"bytes,3,opt,name=firstname,proto3,oneof" json:"firstname,omitempty"`
	Lastname      *string                `protobuf:"bytes,4,opt,name=lastname,proto3,oneof" json:"lastname,omitempty"`
	Channel       *string                `protobuf:"bytes,5,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserByQueryResponse) Reset() {
	*x = GetUserByQueryResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserByQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByQueryResponse) ProtoMessage() {}

func (x *GetUserByQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByQueryResponse.ProtoReflect.Descriptor instead.
func (*GetUserByQueryResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{53}
}

func (x *GetUserByQueryResponse) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GetUserByQueryResponse) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *GetUserByQueryResponse) GetFirstname() string {
	if x != nil && x.Firstname != nil {
		return *x.Firstname
	}
	return ""
}

func (x *GetUserByQueryResponse) GetLastname() string {
	if x != nil && x.Lastname != nil {
		return *x.Lastname
	}
	return ""
}

func (x *GetUserByQueryResponse) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

type SetResetPasswordTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         *string                `protobuf:"bytes,1,opt,name=email,proto3,oneof" json:"email,omitempty"`
	FromEmail     *bool                  `protobuf:"varint,2,opt,name=from_email,json=fromEmail,proto3,oneof" json:"from_email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResetPasswordTokenRequest) Reset() {
	*x = SetResetPasswordTokenRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResetPasswordTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResetPasswordTokenRequest) ProtoMessage() {}

func (x *SetResetPasswordTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResetPasswordTokenRequest.ProtoReflect.Descriptor instead.
func (*SetResetPasswordTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{54}
}

func (x *SetResetPasswordTokenRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *SetResetPasswordTokenRequest) GetFromEmail() bool {
	if x != nil && x.FromEmail != nil {
		return *x.FromEmail
	}
	return false
}

type SetResetPasswordTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResetPasswordTokenResponse) Reset() {
	*x = SetResetPasswordTokenResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResetPasswordTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResetPasswordTokenResponse) ProtoMessage() {}

func (x *SetResetPasswordTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResetPasswordTokenResponse.ProtoReflect.Descriptor instead.
func (*SetResetPasswordTokenResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{55}
}

type UpdateUserPasswdByTokenRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ResetPasswordToken *string                `protobuf:"bytes,1,opt,name=reset_password_token,json=resetPasswordToken,proto3,oneof" json:"reset_password_token,omitempty"`
	NewPassword        *string                `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3,oneof" json:"new_password,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateUserPasswdByTokenRequest) Reset() {
	*x = UpdateUserPasswdByTokenRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserPasswdByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPasswdByTokenRequest) ProtoMessage() {}

func (x *UpdateUserPasswdByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPasswdByTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPasswdByTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateUserPasswdByTokenRequest) GetResetPasswordToken() string {
	if x != nil && x.ResetPasswordToken != nil {
		return *x.ResetPasswordToken
	}
	return ""
}

func (x *UpdateUserPasswdByTokenRequest) GetNewPassword() string {
	if x != nil && x.NewPassword != nil {
		return *x.NewPassword
	}
	return ""
}

type TermsOfUse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AcceptedVersion *string                `protobuf:"bytes,1,opt,name=accepted_version,json=acceptedVersion,proto3,oneof" json:"accepted_version,omitempty"`
	AcceptedAt      *string                `protobuf:"bytes,2,opt,name=accepted_at,json=acceptedAt,proto3,oneof" json:"accepted_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TermsOfUse) Reset() {
	*x = TermsOfUse{}
	mi := &file_user_core_user_core_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermsOfUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsOfUse) ProtoMessage() {}

func (x *TermsOfUse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsOfUse.ProtoReflect.Descriptor instead.
func (*TermsOfUse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{57}
}

func (x *TermsOfUse) GetAcceptedVersion() string {
	if x != nil && x.AcceptedVersion != nil {
		return *x.AcceptedVersion
	}
	return ""
}

func (x *TermsOfUse) GetAcceptedAt() string {
	if x != nil && x.AcceptedAt != nil {
		return *x.AcceptedAt
	}
	return ""
}

type UpdateUserPasswdByTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3,oneof" json:"user,omitempty"`
	TermsOfUse    *TermsOfUse            `protobuf:"bytes,2,opt,name=terms_of_use,json=termsOfUse,proto3,oneof" json:"terms_of_use,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserPasswdByTokenResponse) Reset() {
	*x = UpdateUserPasswdByTokenResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserPasswdByTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPasswdByTokenResponse) ProtoMessage() {}

func (x *UpdateUserPasswdByTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPasswdByTokenResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserPasswdByTokenResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateUserPasswdByTokenResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateUserPasswdByTokenResponse) GetTermsOfUse() *TermsOfUse {
	if x != nil {
		return x.TermsOfUse
	}
	return nil
}

type UserOauthRefreshTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  *string                `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserOauthRefreshTokenRequest) Reset() {
	*x = UserOauthRefreshTokenRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOauthRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOauthRefreshTokenRequest) ProtoMessage() {}

func (x *UserOauthRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOauthRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*UserOauthRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{59}
}

func (x *UserOauthRefreshTokenRequest) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

type UserOauthRefreshTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  *string                `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	ExpiresIn     *int64                 `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	AccessToken   *string                `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	TokenType     *string                `protobuf:"bytes,5,opt,name=token_type,json=tokenType,proto3,oneof" json:"token_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserOauthRefreshTokenResponse) Reset() {
	*x = UserOauthRefreshTokenResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOauthRefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOauthRefreshTokenResponse) ProtoMessage() {}

func (x *UserOauthRefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOauthRefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*UserOauthRefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{60}
}

func (x *UserOauthRefreshTokenResponse) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *UserOauthRefreshTokenResponse) GetExpiresIn() int64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *UserOauthRefreshTokenResponse) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *UserOauthRefreshTokenResponse) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *UserOauthRefreshTokenResponse) GetTokenType() string {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return ""
}

type Subscription struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email                string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	UserId               uint32                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NotificationSettings []byte                 `protobuf:"bytes,4,opt,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	UnsubscribeReason    string                 `protobuf:"bytes,5,opt,name=unsubscribe_reason,json=unsubscribeReason,proto3" json:"unsubscribe_reason,omitempty"`
	Source               string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Extra                []byte                 `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	CreatedAt            string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string                 `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt            string                 `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_user_core_user_core_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{61}
}

func (x *Subscription) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subscription) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Subscription) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Subscription) GetNotificationSettings() []byte {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *Subscription) GetUnsubscribeReason() string {
	if x != nil {
		return x.UnsubscribeReason
	}
	return ""
}

func (x *Subscription) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Subscription) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Subscription) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Subscription) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Subscription) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type GetUserSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSubscriptionRequest) Reset() {
	*x = GetUserSubscriptionRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionRequest) ProtoMessage() {}

func (x *GetUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{62}
}

func (x *GetUserSubscriptionRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserSubscriptionRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *Subscription          `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSubscriptionResponse) Reset() {
	*x = GetUserSubscriptionResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionResponse) ProtoMessage() {}

func (x *GetUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{63}
}

func (x *GetUserSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type UpdateUserSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Subscription  *Subscription          `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSubscriptionRequest) Reset() {
	*x = UpdateUserSubscriptionRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSubscriptionRequest) ProtoMessage() {}

func (x *UpdateUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateUserSubscriptionRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserSubscriptionRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserSubscriptionRequest) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type UpdateUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *Subscription          `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSubscriptionResponse) Reset() {
	*x = UpdateUserSubscriptionResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSubscriptionResponse) ProtoMessage() {}

func (x *UpdateUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateUserSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type CreateUserSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Source        string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Extra         string                 `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserSubscriptionRequest) Reset() {
	*x = CreateUserSubscriptionRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSubscriptionRequest) ProtoMessage() {}

func (x *CreateUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{66}
}

func (x *CreateUserSubscriptionRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateUserSubscriptionRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserSubscriptionRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateUserSubscriptionRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type CreateUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *Subscription          `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserSubscriptionResponse) Reset() {
	*x = CreateUserSubscriptionResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSubscriptionResponse) ProtoMessage() {}

func (x *CreateUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{67}
}

func (x *CreateUserSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type SubscriptionAttempt struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Extra          string                 `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	Source         string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	ExecuteAt      int64                  `protobuf:"varint,5,opt,name=execute_at,json=executeAt,proto3" json:"execute_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscriptionAttempt) Reset() {
	*x = SubscriptionAttempt{}
	mi := &file_user_core_user_core_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionAttempt) ProtoMessage() {}

func (x *SubscriptionAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionAttempt.ProtoReflect.Descriptor instead.
func (*SubscriptionAttempt) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{68}
}

func (x *SubscriptionAttempt) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscriptionAttempt) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *SubscriptionAttempt) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *SubscriptionAttempt) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SubscriptionAttempt) GetExecuteAt() int64 {
	if x != nil {
		return x.ExecuteAt
	}
	return 0
}

type FindOrCreateUserSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Source        string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Extra         []byte                 `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	Unsubscribe   bool                   `protobuf:"varint,5,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindOrCreateUserSubscriptionRequest) Reset() {
	*x = FindOrCreateUserSubscriptionRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOrCreateUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOrCreateUserSubscriptionRequest) ProtoMessage() {}

func (x *FindOrCreateUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOrCreateUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*FindOrCreateUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{69}
}

func (x *FindOrCreateUserSubscriptionRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindOrCreateUserSubscriptionRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FindOrCreateUserSubscriptionRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FindOrCreateUserSubscriptionRequest) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *FindOrCreateUserSubscriptionRequest) GetUnsubscribe() bool {
	if x != nil {
		return x.Unsubscribe
	}
	return false
}

type FindOrCreateUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *Subscription          `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindOrCreateUserSubscriptionResponse) Reset() {
	*x = FindOrCreateUserSubscriptionResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOrCreateUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOrCreateUserSubscriptionResponse) ProtoMessage() {}

func (x *FindOrCreateUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOrCreateUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*FindOrCreateUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{70}
}

func (x *FindOrCreateUserSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type GetBirthdayUsersOfCurrentMonthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // 分页页码
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 分页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBirthdayUsersOfCurrentMonthRequest) Reset() {
	*x = GetBirthdayUsersOfCurrentMonthRequest{}
	mi := &file_user_core_user_core_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBirthdayUsersOfCurrentMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBirthdayUsersOfCurrentMonthRequest) ProtoMessage() {}

func (x *GetBirthdayUsersOfCurrentMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBirthdayUsersOfCurrentMonthRequest.ProtoReflect.Descriptor instead.
func (*GetBirthdayUsersOfCurrentMonthRequest) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{71}
}

func (x *GetBirthdayUsersOfCurrentMonthRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetBirthdayUsersOfCurrentMonthRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetBirthdayUsersOfCurrentMonthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Emails        []string               `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`                            // 当月生日用户的邮箱列表
	TotalCount    uint32                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总用户数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBirthdayUsersOfCurrentMonthResponse) Reset() {
	*x = GetBirthdayUsersOfCurrentMonthResponse{}
	mi := &file_user_core_user_core_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBirthdayUsersOfCurrentMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBirthdayUsersOfCurrentMonthResponse) ProtoMessage() {}

func (x *GetBirthdayUsersOfCurrentMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_core_user_core_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBirthdayUsersOfCurrentMonthResponse.ProtoReflect.Descriptor instead.
func (*GetBirthdayUsersOfCurrentMonthResponse) Descriptor() ([]byte, []int) {
	return file_user_core_user_core_proto_rawDescGZIP(), []int{72}
}

func (x *GetBirthdayUsersOfCurrentMonthResponse) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *GetBirthdayUsersOfCurrentMonthResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_user_core_user_core_proto protoreflect.FileDescriptor

var file_user_core_user_core_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0xe5, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x6f, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x92, 0x02,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x22, 0x67, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x75, 0x73, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x75, 0x73,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x75, 0x73, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x50, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1b, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc9, 0x05,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1f, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30,
	0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x88, 0x04, 0x0a, 0x0a, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x78, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x58, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x58, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f,
	0x78, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x58, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x78, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x58, 0x32, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x72, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x47, 0x72, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x69, 0x5f, 0x78, 0x32, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x58, 0x32, 0x47, 0x72, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x32, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x58, 0x32, 0x47, 0x72, 0x61, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x78, 0x32, 0x5f, 0x67, 0x72, 0x61,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x58,
	0x32, 0x47, 0x72, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x78,
	0x32, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x58, 0x32, 0x47, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x5d, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x03, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a,
	0x15, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0x56, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x1e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x0c, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x68, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73,
	0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x77, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x59, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x68, 0x65, 0x4c,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe9, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x58, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1a, 0x0a, 0x18, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x66, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x11, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0x3e, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x69, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0d,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x22, 0x84, 0x01,
	0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f,
	0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c,
	0x6f, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc1, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x15, 0x6d, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x20,
	0x0a, 0x1e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xf0, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x95, 0x02, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x90, 0x03, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x06, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xe3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x76, 0x0a, 0x1c, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x42, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x22, 0x5a,
	0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4b, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5d, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7c, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x5d, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x23, 0x46,
	0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x22, 0x63, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x61, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x94, 0x17, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x57, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57,
	0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69,
	0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f,
	0x6f, 0x6b, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f,
	0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x70, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x61, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7f, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x30, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_user_core_user_core_proto_rawDescOnce sync.Once
	file_user_core_user_core_proto_rawDescData []byte
)

func file_user_core_user_core_proto_rawDescGZIP() []byte {
	file_user_core_user_core_proto_rawDescOnce.Do(func() {
		file_user_core_user_core_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_user_core_user_core_proto_rawDesc), len(file_user_core_user_core_proto_rawDesc)))
	})
	return file_user_core_user_core_proto_rawDescData
}

var file_user_core_user_core_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_user_core_user_core_proto_goTypes = []any{
	(*User)(nil),                                    // 0: user.core.User
	(*Profile)(nil),                                 // 1: user.core.Profile
	(*UpdateProfileRequest)(nil),                    // 2: user.core.UpdateProfileRequest
	(*UpdateUserRequest)(nil),                       // 3: user.core.UpdateUserRequest
	(*UpdateUserResponse)(nil),                      // 4: user.core.UpdateUserResponse
	(*GetUserRequest)(nil),                          // 5: user.core.GetUserRequest
	(*GetUserResponse)(nil),                         // 6: user.core.GetUserResponse
	(*GetUserAddressesRequest)(nil),                 // 7: user.core.GetUserAddressesRequest
	(*GetUserAddressesResponse)(nil),                // 8: user.core.GetUserAddressesResponse
	(*UpdateUserAddressRequest)(nil),                // 9: user.core.UpdateUserAddressRequest
	(*UpdateUserAddressResponse)(nil),               // 10: user.core.UpdateUserAddressResponse
	(*GetAddressByIdRequest)(nil),                   // 11: user.core.GetAddressByIdRequest
	(*GetAddressByIdResponse)(nil),                  // 12: user.core.GetAddressByIdResponse
	(*UserAddress)(nil),                             // 13: user.core.UserAddress
	(*DeleteUserAddressResponse)(nil),               // 14: user.core.DeleteUserAddressResponse
	(*DeleteUserAddressRequest)(nil),                // 15: user.core.DeleteUserAddressRequest
	(*CreateUserAddressResponse)(nil),               // 16: user.core.CreateUserAddressResponse
	(*CreateUserAddressRequest)(nil),                // 17: user.core.CreateUserAddressRequest
	(*ImageLinks)(nil),                              // 18: user.core.ImageLinks
	(*Image)(nil),                                   // 19: user.core.Image
	(*VariantOptionValue)(nil),                      // 20: user.core.VariantOptionValue
	(*VariantInfo)(nil),                             // 21: user.core.VariantInfo
	(*GetWishItemVariantsRequest)(nil),              // 22: user.core.GetWishItemVariantsRequest
	(*GetWishItemVariantsResponse)(nil),             // 23: user.core.GetWishItemVariantsResponse
	(*DeleteWishItemVariantRequest)(nil),            // 24: user.core.DeleteWishItemVariantRequest
	(*DeleteWishItemVariantResponse)(nil),           // 25: user.core.DeleteWishItemVariantResponse
	(*BatchAddWishItemVariantRequest)(nil),          // 26: user.core.BatchAddWishItemVariantRequest
	(*BatchAddWishItemVariantResponse)(nil),         // 27: user.core.BatchAddWishItemVariantResponse
	(*WishLookInfo)(nil),                            // 28: user.core.WishLookInfo
	(*GetWishLooksInfoByUserRequest)(nil),           // 29: user.core.GetWishLooksInfoByUserRequest
	(*GetWishLooksInfoByUserResponse)(nil),          // 30: user.core.GetWishLooksInfoByUserResponse
	(*DeleteWishLookRequest)(nil),                   // 31: user.core.DeleteWishLookRequest
	(*DeleteWishLookResponse)(nil),                  // 32: user.core.DeleteWishLookResponse
	(*BatchAddWishLookRequest)(nil),                 // 33: user.core.BatchAddWishLookRequest
	(*BatchAddWishLookResponse)(nil),                // 34: user.core.BatchAddWishLookResponse
	(*GetTermsOfUseLogsByUserRequest)(nil),          // 35: user.core.GetTermsOfUseLogsByUserRequest
	(*GetTermsOfUseLogsByUserResponse)(nil),         // 36: user.core.GetTermsOfUseLogsByUserResponse
	(*GetLatestTermsOfUseLogByUserRequest)(nil),     // 37: user.core.GetLatestTermsOfUseLogByUserRequest
	(*GetLatestTermsOfUseLogByUserResponse)(nil),    // 38: user.core.GetLatestTermsOfUseLogByUserResponse
	(*FindOrCreateTermsOfUseLogByUserRequest)(nil),  // 39: user.core.FindOrCreateTermsOfUseLogByUserRequest
	(*FindOrCreateTermsOfUseLogByUserResponse)(nil), // 40: user.core.FindOrCreateTermsOfUseLogByUserResponse
	(*TermsOfUseLog)(nil),                           // 41: user.core.TermsOfUseLog
	(*GetUserByTokenRequest)(nil),                   // 42: user.core.GetUserByTokenRequest
	(*GetUserByTokenResponse)(nil),                  // 43: user.core.GetUserByTokenResponse
	(*ProfileOptional)(nil),                         // 44: user.core.ProfileOptional
	(*CreateUserRequest)(nil),                       // 45: user.core.CreateUserRequest
	(*AccessToken)(nil),                             // 46: user.core.AccessToken
	(*CreateUserResponse)(nil),                      // 47: user.core.CreateUserResponse
	(*UserAuthTokenRequest)(nil),                    // 48: user.core.UserAuthTokenRequest
	(*UserAuthTokenResponse)(nil),                   // 49: user.core.UserAuthTokenResponse
	(*AuthOrCreateUserRequest)(nil),                 // 50: user.core.AuthOrCreateUserRequest
	(*AuthOrCreateUserResponse)(nil),                // 51: user.core.AuthOrCreateUserResponse
	(*GetUserByQueryRequest)(nil),                   // 52: user.core.GetUserByQueryRequest
	(*GetUserByQueryResponse)(nil),                  // 53: user.core.GetUserByQueryResponse
	(*SetResetPasswordTokenRequest)(nil),            // 54: user.core.SetResetPasswordTokenRequest
	(*SetResetPasswordTokenResponse)(nil),           // 55: user.core.SetResetPasswordTokenResponse
	(*UpdateUserPasswdByTokenRequest)(nil),          // 56: user.core.UpdateUserPasswdByTokenRequest
	(*TermsOfUse)(nil),                              // 57: user.core.TermsOfUse
	(*UpdateUserPasswdByTokenResponse)(nil),         // 58: user.core.UpdateUserPasswdByTokenResponse
	(*UserOauthRefreshTokenRequest)(nil),            // 59: user.core.UserOauthRefreshTokenRequest
	(*UserOauthRefreshTokenResponse)(nil),           // 60: user.core.UserOauthRefreshTokenResponse
	(*Subscription)(nil),                            // 61: user.core.Subscription
	(*GetUserSubscriptionRequest)(nil),              // 62: user.core.GetUserSubscriptionRequest
	(*GetUserSubscriptionResponse)(nil),             // 63: user.core.GetUserSubscriptionResponse
	(*UpdateUserSubscriptionRequest)(nil),           // 64: user.core.UpdateUserSubscriptionRequest
	(*UpdateUserSubscriptionResponse)(nil),          // 65: user.core.UpdateUserSubscriptionResponse
	(*CreateUserSubscriptionRequest)(nil),           // 66: user.core.CreateUserSubscriptionRequest
	(*CreateUserSubscriptionResponse)(nil),          // 67: user.core.CreateUserSubscriptionResponse
	(*SubscriptionAttempt)(nil),                     // 68: user.core.SubscriptionAttempt
	(*FindOrCreateUserSubscriptionRequest)(nil),     // 69: user.core.FindOrCreateUserSubscriptionRequest
	(*FindOrCreateUserSubscriptionResponse)(nil),    // 70: user.core.FindOrCreateUserSubscriptionResponse
	(*GetBirthdayUsersOfCurrentMonthRequest)(nil),   // 71: user.core.GetBirthdayUsersOfCurrentMonthRequest
	(*GetBirthdayUsersOfCurrentMonthResponse)(nil),  // 72: user.core.GetBirthdayUsersOfCurrentMonthResponse
	nil, // 73: user.core.BatchAddWishLookRequest.LookIdToInfoEntry
}
var file_user_core_user_core_proto_depIdxs = []int32{
	2,  // 0: user.core.UpdateUserRequest.profile:type_name -> user.core.UpdateProfileRequest
	0,  // 1: user.core.UpdateUserResponse.user:type_name -> user.core.User
	1,  // 2: user.core.UpdateUserResponse.profile:type_name -> user.core.Profile
	0,  // 3: user.core.GetUserResponse.user:type_name -> user.core.User
	1,  // 4: user.core.GetUserResponse.profile:type_name -> user.core.Profile
	13, // 5: user.core.GetUserAddressesResponse.addresses:type_name -> user.core.UserAddress
	13, // 6: user.core.UpdateUserAddressRequest.address:type_name -> user.core.UserAddress
	13, // 7: user.core.GetAddressByIdResponse.address:type_name -> user.core.UserAddress
	19, // 8: user.core.VariantInfo.images:type_name -> user.core.Image
	20, // 9: user.core.VariantInfo.variant_option_values:type_name -> user.core.VariantOptionValue
	28, // 10: user.core.GetWishLooksInfoByUserResponse.wish_looks:type_name -> user.core.WishLookInfo
	73, // 11: user.core.BatchAddWishLookRequest.look_id_to_info:type_name -> user.core.BatchAddWishLookRequest.LookIdToInfoEntry
	41, // 12: user.core.GetTermsOfUseLogsByUserResponse.terms_of_use_logs:type_name -> user.core.TermsOfUseLog
	41, // 13: user.core.GetLatestTermsOfUseLogByUserResponse.terms_of_use_log:type_name -> user.core.TermsOfUseLog
	41, // 14: user.core.FindOrCreateTermsOfUseLogByUserResponse.terms_of_use_log:type_name -> user.core.TermsOfUseLog
	44, // 15: user.core.CreateUserRequest.profile:type_name -> user.core.ProfileOptional
	0,  // 16: user.core.CreateUserResponse.user:type_name -> user.core.User
	46, // 17: user.core.CreateUserResponse.access_token:type_name -> user.core.AccessToken
	0,  // 18: user.core.AuthOrCreateUserResponse.user:type_name -> user.core.User
	0,  // 19: user.core.UpdateUserPasswdByTokenResponse.user:type_name -> user.core.User
	57, // 20: user.core.UpdateUserPasswdByTokenResponse.terms_of_use:type_name -> user.core.TermsOfUse
	61, // 21: user.core.GetUserSubscriptionResponse.subscription:type_name -> user.core.Subscription
	61, // 22: user.core.UpdateUserSubscriptionRequest.subscription:type_name -> user.core.Subscription
	61, // 23: user.core.UpdateUserSubscriptionResponse.subscription:type_name -> user.core.Subscription
	61, // 24: user.core.CreateUserSubscriptionResponse.subscription:type_name -> user.core.Subscription
	61, // 25: user.core.FindOrCreateUserSubscriptionResponse.subscription:type_name -> user.core.Subscription
	28, // 26: user.core.BatchAddWishLookRequest.LookIdToInfoEntry.value:type_name -> user.core.WishLookInfo
	5,  // 27: user.core.UserService.GetUser:input_type -> user.core.GetUserRequest
	3,  // 28: user.core.UserService.UpdateUser:input_type -> user.core.UpdateUserRequest
	7,  // 29: user.core.UserService.GetUserAddresses:input_type -> user.core.GetUserAddressesRequest
	9,  // 30: user.core.UserService.UpdateUserAddress:input_type -> user.core.UpdateUserAddressRequest
	17, // 31: user.core.UserService.CreateUserAddress:input_type -> user.core.CreateUserAddressRequest
	15, // 32: user.core.UserService.DeleteUserAddress:input_type -> user.core.DeleteUserAddressRequest
	11, // 33: user.core.UserService.GetAddressById:input_type -> user.core.GetAddressByIdRequest
	22, // 34: user.core.UserService.GetWishItemVariants:input_type -> user.core.GetWishItemVariantsRequest
	24, // 35: user.core.UserService.DeleteWishItemVariant:input_type -> user.core.DeleteWishItemVariantRequest
	26, // 36: user.core.UserService.BatchAddWishItemVariant:input_type -> user.core.BatchAddWishItemVariantRequest
	29, // 37: user.core.UserService.GetWishLooksInfoByUser:input_type -> user.core.GetWishLooksInfoByUserRequest
	31, // 38: user.core.UserService.DeleteWishLook:input_type -> user.core.DeleteWishLookRequest
	33, // 39: user.core.UserService.BatchAddWishLook:input_type -> user.core.BatchAddWishLookRequest
	35, // 40: user.core.UserService.GetTermsOfUseLogsByUser:input_type -> user.core.GetTermsOfUseLogsByUserRequest
	37, // 41: user.core.UserService.GetLatestTermsOfUseLogByUser:input_type -> user.core.GetLatestTermsOfUseLogByUserRequest
	39, // 42: user.core.UserService.FindOrCreateTermsOfUseLogByUser:input_type -> user.core.FindOrCreateTermsOfUseLogByUserRequest
	42, // 43: user.core.UserService.GetUserByToken:input_type -> user.core.GetUserByTokenRequest
	45, // 44: user.core.UserService.CreateUser:input_type -> user.core.CreateUserRequest
	48, // 45: user.core.UserService.UserAuthToken:input_type -> user.core.UserAuthTokenRequest
	50, // 46: user.core.UserService.AuthOrCreateUser:input_type -> user.core.AuthOrCreateUserRequest
	52, // 47: user.core.UserService.GetUserByQuery:input_type -> user.core.GetUserByQueryRequest
	54, // 48: user.core.UserService.SetResetPasswordToken:input_type -> user.core.SetResetPasswordTokenRequest
	56, // 49: user.core.UserService.UpdateUserPasswdByToken:input_type -> user.core.UpdateUserPasswdByTokenRequest
	59, // 50: user.core.UserService.UserOauthRefreshToken:input_type -> user.core.UserOauthRefreshTokenRequest
	62, // 51: user.core.UserService.GetUserSubscription:input_type -> user.core.GetUserSubscriptionRequest
	64, // 52: user.core.UserService.UpdateUserSubscription:input_type -> user.core.UpdateUserSubscriptionRequest
	66, // 53: user.core.UserService.CreateUserSubscription:input_type -> user.core.CreateUserSubscriptionRequest
	69, // 54: user.core.UserService.FindOrCreateUserSubscription:input_type -> user.core.FindOrCreateUserSubscriptionRequest
	71, // 55: user.core.UserService.GetBirthdayUsersOfCurrentMonth:input_type -> user.core.GetBirthdayUsersOfCurrentMonthRequest
	6,  // 56: user.core.UserService.GetUser:output_type -> user.core.GetUserResponse
	4,  // 57: user.core.UserService.UpdateUser:output_type -> user.core.UpdateUserResponse
	8,  // 58: user.core.UserService.GetUserAddresses:output_type -> user.core.GetUserAddressesResponse
	10, // 59: user.core.UserService.UpdateUserAddress:output_type -> user.core.UpdateUserAddressResponse
	16, // 60: user.core.UserService.CreateUserAddress:output_type -> user.core.CreateUserAddressResponse
	14, // 61: user.core.UserService.DeleteUserAddress:output_type -> user.core.DeleteUserAddressResponse
	12, // 62: user.core.UserService.GetAddressById:output_type -> user.core.GetAddressByIdResponse
	23, // 63: user.core.UserService.GetWishItemVariants:output_type -> user.core.GetWishItemVariantsResponse
	25, // 64: user.core.UserService.DeleteWishItemVariant:output_type -> user.core.DeleteWishItemVariantResponse
	27, // 65: user.core.UserService.BatchAddWishItemVariant:output_type -> user.core.BatchAddWishItemVariantResponse
	30, // 66: user.core.UserService.GetWishLooksInfoByUser:output_type -> user.core.GetWishLooksInfoByUserResponse
	32, // 67: user.core.UserService.DeleteWishLook:output_type -> user.core.DeleteWishLookResponse
	34, // 68: user.core.UserService.BatchAddWishLook:output_type -> user.core.BatchAddWishLookResponse
	36, // 69: user.core.UserService.GetTermsOfUseLogsByUser:output_type -> user.core.GetTermsOfUseLogsByUserResponse
	38, // 70: user.core.UserService.GetLatestTermsOfUseLogByUser:output_type -> user.core.GetLatestTermsOfUseLogByUserResponse
	40, // 71: user.core.UserService.FindOrCreateTermsOfUseLogByUser:output_type -> user.core.FindOrCreateTermsOfUseLogByUserResponse
	43, // 72: user.core.UserService.GetUserByToken:output_type -> user.core.GetUserByTokenResponse
	47, // 73: user.core.UserService.CreateUser:output_type -> user.core.CreateUserResponse
	49, // 74: user.core.UserService.UserAuthToken:output_type -> user.core.UserAuthTokenResponse
	51, // 75: user.core.UserService.AuthOrCreateUser:output_type -> user.core.AuthOrCreateUserResponse
	53, // 76: user.core.UserService.GetUserByQuery:output_type -> user.core.GetUserByQueryResponse
	55, // 77: user.core.UserService.SetResetPasswordToken:output_type -> user.core.SetResetPasswordTokenResponse
	58, // 78: user.core.UserService.UpdateUserPasswdByToken:output_type -> user.core.UpdateUserPasswdByTokenResponse
	60, // 79: user.core.UserService.UserOauthRefreshToken:output_type -> user.core.UserOauthRefreshTokenResponse
	63, // 80: user.core.UserService.GetUserSubscription:output_type -> user.core.GetUserSubscriptionResponse
	65, // 81: user.core.UserService.UpdateUserSubscription:output_type -> user.core.UpdateUserSubscriptionResponse
	67, // 82: user.core.UserService.CreateUserSubscription:output_type -> user.core.CreateUserSubscriptionResponse
	70, // 83: user.core.UserService.FindOrCreateUserSubscription:output_type -> user.core.FindOrCreateUserSubscriptionResponse
	72, // 84: user.core.UserService.GetBirthdayUsersOfCurrentMonth:output_type -> user.core.GetBirthdayUsersOfCurrentMonthResponse
	56, // [56:85] is the sub-list for method output_type
	27, // [27:56] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_user_core_user_core_proto_init() }
func file_user_core_user_core_proto_init() {
	if File_user_core_user_core_proto != nil {
		return
	}
	file_user_core_user_core_proto_msgTypes[3].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[6].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[9].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[17].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[42].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[44].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[45].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[46].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[47].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[48].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[49].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[50].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[51].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[52].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[53].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[54].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[56].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[57].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[58].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[59].OneofWrappers = []any{}
	file_user_core_user_core_proto_msgTypes[60].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_user_core_user_core_proto_rawDesc), len(file_user_core_user_core_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_core_user_core_proto_goTypes,
		DependencyIndexes: file_user_core_user_core_proto_depIdxs,
		MessageInfos:      file_user_core_user_core_proto_msgTypes,
	}.Build()
	File_user_core_user_core_proto = out.File
	file_user_core_user_core_proto_goTypes = nil
	file_user_core_user_core_proto_depIdxs = nil
}
