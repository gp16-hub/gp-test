// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: user_core.proto

package server

import (
	"context"

	"core/internal/logic"
	"core/internal/svc"
	"core/user/core"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	core.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// Gets a user by ID
func (s *UserServiceServer) GetUser(ctx context.Context, in *core.GetUserRequest) (*core.GetUserResponse, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

// Update a user by ID
func (s *UserServiceServer) UpdateUser(ctx context.Context, in *core.UpdateUserRequest) (*core.UpdateUserResponse, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

// Gets a user address by ID
func (s *UserServiceServer) GetUserAddresses(ctx context.Context, in *core.GetUserAddressesRequest) (*core.GetUserAddressesResponse, error) {
	l := logic.NewGetUserAddressesLogic(ctx, s.svcCtx)
	return l.GetUserAddresses(in)
}

// Update a user address
func (s *UserServiceServer) UpdateUserAddress(ctx context.Context, in *core.UpdateUserAddressRequest) (*core.UpdateUserAddressResponse, error) {
	l := logic.NewUpdateUserAddressLogic(ctx, s.svcCtx)
	return l.UpdateUserAddress(in)
}

// Create a user address by ID
func (s *UserServiceServer) CreateUserAddress(ctx context.Context, in *core.CreateUserAddressRequest) (*core.CreateUserAddressResponse, error) {
	l := logic.NewCreateUserAddressLogic(ctx, s.svcCtx)
	return l.CreateUserAddress(in)
}

// Delete a user address by ID
func (s *UserServiceServer) DeleteUserAddress(ctx context.Context, in *core.DeleteUserAddressRequest) (*core.DeleteUserAddressResponse, error) {
	l := logic.NewDeleteUserAddressLogic(ctx, s.svcCtx)
	return l.DeleteUserAddress(in)
}

// Gets address by address ID
func (s *UserServiceServer) GetAddressById(ctx context.Context, in *core.GetAddressByIdRequest) (*core.GetAddressByIdResponse, error) {
	l := logic.NewGetAddressByIdLogic(ctx, s.svcCtx)
	return l.GetAddressById(in)
}

// 获取收藏清单中的所有产品
func (s *UserServiceServer) GetWishItemVariants(ctx context.Context, in *core.GetWishItemVariantsRequest) (*core.GetWishItemVariantsResponse, error) {
	l := logic.NewGetWishItemVariantsLogic(ctx, s.svcCtx)
	return l.GetWishItemVariants(in)
}

// 删除收藏清单中的某个产品
func (s *UserServiceServer) DeleteWishItemVariant(ctx context.Context, in *core.DeleteWishItemVariantRequest) (*core.DeleteWishItemVariantResponse, error) {
	l := logic.NewDeleteWishItemVariantLogic(ctx, s.svcCtx)
	return l.DeleteWishItemVariant(in)
}

// 批量添加收藏清单中的产品
func (s *UserServiceServer) BatchAddWishItemVariant(ctx context.Context, in *core.BatchAddWishItemVariantRequest) (*core.BatchAddWishItemVariantResponse, error) {
	l := logic.NewBatchAddWishItemVariantLogic(ctx, s.svcCtx)
	return l.BatchAddWishItemVariant(in)
}

// 获取用户收藏的look信息
func (s *UserServiceServer) GetWishLooksInfoByUser(ctx context.Context, in *core.GetWishLooksInfoByUserRequest) (*core.GetWishLooksInfoByUserResponse, error) {
	l := logic.NewGetWishLooksInfoByUserLogic(ctx, s.svcCtx)
	return l.GetWishLooksInfoByUser(in)
}

// 删除收藏look
func (s *UserServiceServer) DeleteWishLook(ctx context.Context, in *core.DeleteWishLookRequest) (*core.DeleteWishLookResponse, error) {
	l := logic.NewDeleteWishLookLogic(ctx, s.svcCtx)
	return l.DeleteWishLook(in)
}

// 批量添加收藏look
func (s *UserServiceServer) BatchAddWishLook(ctx context.Context, in *core.BatchAddWishLookRequest) (*core.BatchAddWishLookResponse, error) {
	l := logic.NewBatchAddWishLookLogic(ctx, s.svcCtx)
	return l.BatchAddWishLook(in)
}

// 获取用户接受的使用协议的日志
func (s *UserServiceServer) GetTermsOfUseLogsByUser(ctx context.Context, in *core.GetTermsOfUseLogsByUserRequest) (*core.GetTermsOfUseLogsByUserResponse, error) {
	l := logic.NewGetTermsOfUseLogsByUserLogic(ctx, s.svcCtx)
	return l.GetTermsOfUseLogsByUser(in)
}

// 获取用户最新接受的使用协议日志
func (s *UserServiceServer) GetLatestTermsOfUseLogByUser(ctx context.Context, in *core.GetLatestTermsOfUseLogByUserRequest) (*core.GetLatestTermsOfUseLogByUserResponse, error) {
	l := logic.NewGetLatestTermsOfUseLogByUserLogic(ctx, s.svcCtx)
	return l.GetLatestTermsOfUseLogByUser(in)
}

// 更新用户接受的使用协议的日志
func (s *UserServiceServer) FindOrCreateTermsOfUseLogByUser(ctx context.Context, in *core.FindOrCreateTermsOfUseLogByUserRequest) (*core.FindOrCreateTermsOfUseLogByUserResponse, error) {
	l := logic.NewFindOrCreateTermsOfUseLogByUserLogic(ctx, s.svcCtx)
	return l.FindOrCreateTermsOfUseLogByUser(in)
}

func (s *UserServiceServer) GetUserByToken(ctx context.Context, in *core.GetUserByTokenRequest) (*core.GetUserByTokenResponse, error) {
	l := logic.NewGetUserByTokenLogic(ctx, s.svcCtx)
	return l.GetUserByToken(in)
}

func (s *UserServiceServer) CreateUser(ctx context.Context, in *core.CreateUserRequest) (*core.CreateUserResponse, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServiceServer) UserAuthToken(ctx context.Context, in *core.UserAuthTokenRequest) (*core.UserAuthTokenResponse, error) {
	l := logic.NewUserAuthTokenLogic(ctx, s.svcCtx)
	return l.UserAuthToken(in)
}

func (s *UserServiceServer) AuthOrCreateUser(ctx context.Context, in *core.AuthOrCreateUserRequest) (*core.AuthOrCreateUserResponse, error) {
	l := logic.NewAuthOrCreateUserLogic(ctx, s.svcCtx)
	return l.AuthOrCreateUser(in)
}

func (s *UserServiceServer) GetUserByQuery(ctx context.Context, in *core.GetUserByQueryRequest) (*core.GetUserByQueryResponse, error) {
	l := logic.NewGetUserByQueryLogic(ctx, s.svcCtx)
	return l.GetUserByQuery(in)
}

func (s *UserServiceServer) SetResetPasswordToken(ctx context.Context, in *core.SetResetPasswordTokenRequest) (*core.SetResetPasswordTokenResponse, error) {
	l := logic.NewSetResetPasswordTokenLogic(ctx, s.svcCtx)
	return l.SetResetPasswordToken(in)
}

func (s *UserServiceServer) UpdateUserPasswdByToken(ctx context.Context, in *core.UpdateUserPasswdByTokenRequest) (*core.UpdateUserPasswdByTokenResponse, error) {
	l := logic.NewUpdateUserPasswdByTokenLogic(ctx, s.svcCtx)
	return l.UpdateUserPasswdByToken(in)
}

func (s *UserServiceServer) UserOauthRefreshToken(ctx context.Context, in *core.UserOauthRefreshTokenRequest) (*core.UserOauthRefreshTokenResponse, error) {
	l := logic.NewUserOauthRefreshTokenLogic(ctx, s.svcCtx)
	return l.UserOauthRefreshToken(in)
}

func (s *UserServiceServer) GetUserSubscription(ctx context.Context, in *core.GetUserSubscriptionRequest) (*core.GetUserSubscriptionResponse, error) {
	l := logic.NewGetUserSubscriptionLogic(ctx, s.svcCtx)
	return l.GetUserSubscription(in)
}

func (s *UserServiceServer) UpdateUserSubscription(ctx context.Context, in *core.UpdateUserSubscriptionRequest) (*core.UpdateUserSubscriptionResponse, error) {
	l := logic.NewUpdateUserSubscriptionLogic(ctx, s.svcCtx)
	return l.UpdateUserSubscription(in)
}

func (s *UserServiceServer) CreateUserSubscription(ctx context.Context, in *core.CreateUserSubscriptionRequest) (*core.CreateUserSubscriptionResponse, error) {
	l := logic.NewCreateUserSubscriptionLogic(ctx, s.svcCtx)
	return l.CreateUserSubscription(in)
}

func (s *UserServiceServer) FindOrCreateUserSubscription(ctx context.Context, in *core.FindOrCreateUserSubscriptionRequest) (*core.FindOrCreateUserSubscriptionResponse, error) {
	l := logic.NewFindOrCreateUserSubscriptionLogic(ctx, s.svcCtx)
	return l.FindOrCreateUserSubscription(in)
}

// Get birthday users of current month
func (s *UserServiceServer) GetBirthdayUsersOfCurrentMonth(ctx context.Context, in *core.GetBirthdayUsersOfCurrentMonthRequest) (*core.GetBirthdayUsersOfCurrentMonthResponse, error) {
	l := logic.NewGetBirthdayUsersOfCurrentMonthLogic(ctx, s.svcCtx)
	return l.GetBirthdayUsersOfCurrentMonth(in)
}
