// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: user_core.proto

package userservice

import (
	"context"

	"core/user/core"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccessToken                             = core.AccessToken
	AuthOrCreateUserRequest                 = core.AuthOrCreateUserRequest
	AuthOrCreateUserResponse                = core.AuthOrCreateUserResponse
	BatchAddWishItemVariantRequest          = core.BatchAddWishItemVariantRequest
	BatchAddWishItemVariantResponse         = core.BatchAddWishItemVariantResponse
	BatchAddWishLookRequest                 = core.BatchAddWishLookRequest
	BatchAddWishLookResponse                = core.BatchAddWishLookResponse
	CreateUserAddressRequest                = core.CreateUserAddressRequest
	CreateUserAddressResponse               = core.CreateUserAddressResponse
	CreateUserRequest                       = core.CreateUserRequest
	CreateUserResponse                      = core.CreateUserResponse
	CreateUserSubscriptionRequest           = core.CreateUserSubscriptionRequest
	CreateUserSubscriptionResponse          = core.CreateUserSubscriptionResponse
	DeleteUserAddressRequest                = core.DeleteUserAddressRequest
	DeleteUserAddressResponse               = core.DeleteUserAddressResponse
	DeleteWishItemVariantRequest            = core.DeleteWishItemVariantRequest
	DeleteWishItemVariantResponse           = core.DeleteWishItemVariantResponse
	DeleteWishLookRequest                   = core.DeleteWishLookRequest
	DeleteWishLookResponse                  = core.DeleteWishLookResponse
	FindOrCreateTermsOfUseLogByUserRequest  = core.FindOrCreateTermsOfUseLogByUserRequest
	FindOrCreateTermsOfUseLogByUserResponse = core.FindOrCreateTermsOfUseLogByUserResponse
	FindOrCreateUserSubscriptionRequest     = core.FindOrCreateUserSubscriptionRequest
	FindOrCreateUserSubscriptionResponse    = core.FindOrCreateUserSubscriptionResponse
	GetAddressByIdRequest                   = core.GetAddressByIdRequest
	GetAddressByIdResponse                  = core.GetAddressByIdResponse
	GetBirthdayUsersOfCurrentMonthRequest   = core.GetBirthdayUsersOfCurrentMonthRequest
	GetBirthdayUsersOfCurrentMonthResponse  = core.GetBirthdayUsersOfCurrentMonthResponse
	GetLatestTermsOfUseLogByUserRequest     = core.GetLatestTermsOfUseLogByUserRequest
	GetLatestTermsOfUseLogByUserResponse    = core.GetLatestTermsOfUseLogByUserResponse
	GetTermsOfUseLogsByUserRequest          = core.GetTermsOfUseLogsByUserRequest
	GetTermsOfUseLogsByUserResponse         = core.GetTermsOfUseLogsByUserResponse
	GetUserAddressesRequest                 = core.GetUserAddressesRequest
	GetUserAddressesResponse                = core.GetUserAddressesResponse
	GetUserByQueryRequest                   = core.GetUserByQueryRequest
	GetUserByQueryResponse                  = core.GetUserByQueryResponse
	GetUserByTokenRequest                   = core.GetUserByTokenRequest
	GetUserByTokenResponse                  = core.GetUserByTokenResponse
	GetUserRequest                          = core.GetUserRequest
	GetUserResponse                         = core.GetUserResponse
	GetUserSubscriptionRequest              = core.GetUserSubscriptionRequest
	GetUserSubscriptionResponse             = core.GetUserSubscriptionResponse
	GetWishItemVariantsRequest              = core.GetWishItemVariantsRequest
	GetWishItemVariantsResponse             = core.GetWishItemVariantsResponse
	GetWishLooksInfoByUserRequest           = core.GetWishLooksInfoByUserRequest
	GetWishLooksInfoByUserResponse          = core.GetWishLooksInfoByUserResponse
	Image                                   = core.Image
	ImageLinks                              = core.ImageLinks
	Profile                                 = core.Profile
	ProfileOptional                         = core.ProfileOptional
	SetResetPasswordTokenRequest            = core.SetResetPasswordTokenRequest
	SetResetPasswordTokenResponse           = core.SetResetPasswordTokenResponse
	Subscription                            = core.Subscription
	SubscriptionAttempt                     = core.SubscriptionAttempt
	TermsOfUse                              = core.TermsOfUse
	TermsOfUseLog                           = core.TermsOfUseLog
	UpdateProfileRequest                    = core.UpdateProfileRequest
	UpdateUserAddressRequest                = core.UpdateUserAddressRequest
	UpdateUserAddressResponse               = core.UpdateUserAddressResponse
	UpdateUserPasswdByTokenRequest          = core.UpdateUserPasswdByTokenRequest
	UpdateUserPasswdByTokenResponse         = core.UpdateUserPasswdByTokenResponse
	UpdateUserRequest                       = core.UpdateUserRequest
	UpdateUserResponse                      = core.UpdateUserResponse
	UpdateUserSubscriptionRequest           = core.UpdateUserSubscriptionRequest
	UpdateUserSubscriptionResponse          = core.UpdateUserSubscriptionResponse
	User                                    = core.User
	UserAddress                             = core.UserAddress
	UserAuthTokenRequest                    = core.UserAuthTokenRequest
	UserAuthTokenResponse                   = core.UserAuthTokenResponse
	UserOauthRefreshTokenRequest            = core.UserOauthRefreshTokenRequest
	UserOauthRefreshTokenResponse           = core.UserOauthRefreshTokenResponse
	VariantInfo                             = core.VariantInfo
	VariantOptionValue                      = core.VariantOptionValue
	WishLookInfo                            = core.WishLookInfo

	UserService interface {
		// Gets a user by ID
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		// Update a user by ID
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// Gets a user address by ID
		GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error)
		// Update a user address
		UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error)
		// Create a user address by ID
		CreateUserAddress(ctx context.Context, in *CreateUserAddressRequest, opts ...grpc.CallOption) (*CreateUserAddressResponse, error)
		// Delete a user address by ID
		DeleteUserAddress(ctx context.Context, in *DeleteUserAddressRequest, opts ...grpc.CallOption) (*DeleteUserAddressResponse, error)
		// Gets address by address ID
		GetAddressById(ctx context.Context, in *GetAddressByIdRequest, opts ...grpc.CallOption) (*GetAddressByIdResponse, error)
		// 获取收藏清单中的所有产品
		GetWishItemVariants(ctx context.Context, in *GetWishItemVariantsRequest, opts ...grpc.CallOption) (*GetWishItemVariantsResponse, error)
		// 删除收藏清单中的某个产品
		DeleteWishItemVariant(ctx context.Context, in *DeleteWishItemVariantRequest, opts ...grpc.CallOption) (*DeleteWishItemVariantResponse, error)
		// 批量添加收藏清单中的产品
		BatchAddWishItemVariant(ctx context.Context, in *BatchAddWishItemVariantRequest, opts ...grpc.CallOption) (*BatchAddWishItemVariantResponse, error)
		// 获取用户收藏的look信息
		GetWishLooksInfoByUser(ctx context.Context, in *GetWishLooksInfoByUserRequest, opts ...grpc.CallOption) (*GetWishLooksInfoByUserResponse, error)
		// 删除收藏look
		DeleteWishLook(ctx context.Context, in *DeleteWishLookRequest, opts ...grpc.CallOption) (*DeleteWishLookResponse, error)
		// 批量添加收藏look
		BatchAddWishLook(ctx context.Context, in *BatchAddWishLookRequest, opts ...grpc.CallOption) (*BatchAddWishLookResponse, error)
		// 获取用户接受的使用协议的日志
		GetTermsOfUseLogsByUser(ctx context.Context, in *GetTermsOfUseLogsByUserRequest, opts ...grpc.CallOption) (*GetTermsOfUseLogsByUserResponse, error)
		// 获取用户最新接受的使用协议日志
		GetLatestTermsOfUseLogByUser(ctx context.Context, in *GetLatestTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*GetLatestTermsOfUseLogByUserResponse, error)
		// 更新用户接受的使用协议的日志
		FindOrCreateTermsOfUseLogByUser(ctx context.Context, in *FindOrCreateTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*FindOrCreateTermsOfUseLogByUserResponse, error)
		GetUserByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserByTokenResponse, error)
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		UserAuthToken(ctx context.Context, in *UserAuthTokenRequest, opts ...grpc.CallOption) (*UserAuthTokenResponse, error)
		AuthOrCreateUser(ctx context.Context, in *AuthOrCreateUserRequest, opts ...grpc.CallOption) (*AuthOrCreateUserResponse, error)
		GetUserByQuery(ctx context.Context, in *GetUserByQueryRequest, opts ...grpc.CallOption) (*GetUserByQueryResponse, error)
		SetResetPasswordToken(ctx context.Context, in *SetResetPasswordTokenRequest, opts ...grpc.CallOption) (*SetResetPasswordTokenResponse, error)
		UpdateUserPasswdByToken(ctx context.Context, in *UpdateUserPasswdByTokenRequest, opts ...grpc.CallOption) (*UpdateUserPasswdByTokenResponse, error)
		UserOauthRefreshToken(ctx context.Context, in *UserOauthRefreshTokenRequest, opts ...grpc.CallOption) (*UserOauthRefreshTokenResponse, error)
		GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error)
		UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error)
		CreateUserSubscription(ctx context.Context, in *CreateUserSubscriptionRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionResponse, error)
		FindOrCreateUserSubscription(ctx context.Context, in *FindOrCreateUserSubscriptionRequest, opts ...grpc.CallOption) (*FindOrCreateUserSubscriptionResponse, error)
		// Get birthday users of current month
		GetBirthdayUsersOfCurrentMonth(ctx context.Context, in *GetBirthdayUsersOfCurrentMonthRequest, opts ...grpc.CallOption) (*GetBirthdayUsersOfCurrentMonthResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// Gets a user by ID
func (m *defaultUserService) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// Update a user by ID
func (m *defaultUserService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// Gets a user address by ID
func (m *defaultUserService) GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetUserAddresses(ctx, in, opts...)
}

// Update a user address
func (m *defaultUserService) UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserAddress(ctx, in, opts...)
}

// Create a user address by ID
func (m *defaultUserService) CreateUserAddress(ctx context.Context, in *CreateUserAddressRequest, opts ...grpc.CallOption) (*CreateUserAddressResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.CreateUserAddress(ctx, in, opts...)
}

// Delete a user address by ID
func (m *defaultUserService) DeleteUserAddress(ctx context.Context, in *DeleteUserAddressRequest, opts ...grpc.CallOption) (*DeleteUserAddressResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUserAddress(ctx, in, opts...)
}

// Gets address by address ID
func (m *defaultUserService) GetAddressById(ctx context.Context, in *GetAddressByIdRequest, opts ...grpc.CallOption) (*GetAddressByIdResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetAddressById(ctx, in, opts...)
}

// 获取收藏清单中的所有产品
func (m *defaultUserService) GetWishItemVariants(ctx context.Context, in *GetWishItemVariantsRequest, opts ...grpc.CallOption) (*GetWishItemVariantsResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetWishItemVariants(ctx, in, opts...)
}

// 删除收藏清单中的某个产品
func (m *defaultUserService) DeleteWishItemVariant(ctx context.Context, in *DeleteWishItemVariantRequest, opts ...grpc.CallOption) (*DeleteWishItemVariantResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.DeleteWishItemVariant(ctx, in, opts...)
}

// 批量添加收藏清单中的产品
func (m *defaultUserService) BatchAddWishItemVariant(ctx context.Context, in *BatchAddWishItemVariantRequest, opts ...grpc.CallOption) (*BatchAddWishItemVariantResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.BatchAddWishItemVariant(ctx, in, opts...)
}

// 获取用户收藏的look信息
func (m *defaultUserService) GetWishLooksInfoByUser(ctx context.Context, in *GetWishLooksInfoByUserRequest, opts ...grpc.CallOption) (*GetWishLooksInfoByUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetWishLooksInfoByUser(ctx, in, opts...)
}

// 删除收藏look
func (m *defaultUserService) DeleteWishLook(ctx context.Context, in *DeleteWishLookRequest, opts ...grpc.CallOption) (*DeleteWishLookResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.DeleteWishLook(ctx, in, opts...)
}

// 批量添加收藏look
func (m *defaultUserService) BatchAddWishLook(ctx context.Context, in *BatchAddWishLookRequest, opts ...grpc.CallOption) (*BatchAddWishLookResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.BatchAddWishLook(ctx, in, opts...)
}

// 获取用户接受的使用协议的日志
func (m *defaultUserService) GetTermsOfUseLogsByUser(ctx context.Context, in *GetTermsOfUseLogsByUserRequest, opts ...grpc.CallOption) (*GetTermsOfUseLogsByUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetTermsOfUseLogsByUser(ctx, in, opts...)
}

// 获取用户最新接受的使用协议日志
func (m *defaultUserService) GetLatestTermsOfUseLogByUser(ctx context.Context, in *GetLatestTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*GetLatestTermsOfUseLogByUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetLatestTermsOfUseLogByUser(ctx, in, opts...)
}

// 更新用户接受的使用协议的日志
func (m *defaultUserService) FindOrCreateTermsOfUseLogByUser(ctx context.Context, in *FindOrCreateTermsOfUseLogByUserRequest, opts ...grpc.CallOption) (*FindOrCreateTermsOfUseLogByUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.FindOrCreateTermsOfUseLogByUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByToken(ctx context.Context, in *GetUserByTokenRequest, opts ...grpc.CallOption) (*GetUserByTokenResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByToken(ctx, in, opts...)
}

func (m *defaultUserService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserService) UserAuthToken(ctx context.Context, in *UserAuthTokenRequest, opts ...grpc.CallOption) (*UserAuthTokenResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.UserAuthToken(ctx, in, opts...)
}

func (m *defaultUserService) AuthOrCreateUser(ctx context.Context, in *AuthOrCreateUserRequest, opts ...grpc.CallOption) (*AuthOrCreateUserResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.AuthOrCreateUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByQuery(ctx context.Context, in *GetUserByQueryRequest, opts ...grpc.CallOption) (*GetUserByQueryResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByQuery(ctx, in, opts...)
}

func (m *defaultUserService) SetResetPasswordToken(ctx context.Context, in *SetResetPasswordTokenRequest, opts ...grpc.CallOption) (*SetResetPasswordTokenResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.SetResetPasswordToken(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUserPasswdByToken(ctx context.Context, in *UpdateUserPasswdByTokenRequest, opts ...grpc.CallOption) (*UpdateUserPasswdByTokenResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserPasswdByToken(ctx, in, opts...)
}

func (m *defaultUserService) UserOauthRefreshToken(ctx context.Context, in *UserOauthRefreshTokenRequest, opts ...grpc.CallOption) (*UserOauthRefreshTokenResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.UserOauthRefreshToken(ctx, in, opts...)
}

func (m *defaultUserService) GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetUserSubscription(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserSubscription(ctx, in, opts...)
}

func (m *defaultUserService) CreateUserSubscription(ctx context.Context, in *CreateUserSubscriptionRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.CreateUserSubscription(ctx, in, opts...)
}

func (m *defaultUserService) FindOrCreateUserSubscription(ctx context.Context, in *FindOrCreateUserSubscriptionRequest, opts ...grpc.CallOption) (*FindOrCreateUserSubscriptionResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.FindOrCreateUserSubscription(ctx, in, opts...)
}

// Get birthday users of current month
func (m *defaultUserService) GetBirthdayUsersOfCurrentMonth(ctx context.Context, in *GetBirthdayUsersOfCurrentMonthRequest, opts ...grpc.CallOption) (*GetBirthdayUsersOfCurrentMonthResponse, error) {
	client := core.NewUserServiceClient(m.cli.Conn())
	return client.GetBirthdayUsersOfCurrentMonth(ctx, in, opts...)
}
